//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Main`.
    static let main = Rswift.ColorResource(bundle: R.hostingBundle, name: "Main")
    /// Color `Secondary`.
    static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "Secondary")
    /// Color `Text_Field`.
    static let text_Field = Rswift.ColorResource(bundle: R.hostingBundle, name: "Text_Field")
    /// Color `Theme_Color`.
    static let theme_Color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Theme_Color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Main", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func main(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.main, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Text_Field", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_Field(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_Field, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Theme_Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func theme_Color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.theme_Color, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Main", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func main(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.main.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Secondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Text_Field", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_Field(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_Field.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Theme_Color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func theme_Color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.theme_Color.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 189 images.
  struct image {
    /// Image `Cart`.
    static let cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Cart")
    /// Image `ChangePassword`.
    static let changePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "ChangePassword")
    /// Image `CircleUncheck`.
    static let circleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "CircleUncheck")
    /// Image `Clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "Clock")
    /// Image `Delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "Delete")
    /// Image `Ellipse 25`.
    static let ellipse25 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 25")
    /// Image `Ellipse 73`.
    static let ellipse73 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 73")
    /// Image `Ellipse 74`.
    static let ellipse74 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 74")
    /// Image `Ellipse 75`.
    static let ellipse75 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 75")
    /// Image `Ellipse 76`.
    static let ellipse76 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 76")
    /// Image `Ellipse 88`.
    static let ellipse88 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 88")
    /// Image `Ellipse 89`.
    static let ellipse89 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 89")
    /// Image `Ellipse 90`.
    static let ellipse90 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 90")
    /// Image `Ellipse 91`.
    static let ellipse91 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 91")
    /// Image `FAQ`.
    static let faQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "FAQ")
    /// Image `Frame (1)`.
    static let frame1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Frame (1)")
    /// Image `GOFOODOO-FF 1`.
    static let gofoodooff1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "GOFOODOO-FF 1")
    /// Image `Go Green,GoFoodoo`.
    static let goGreenGoFoodoo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Go Green,GoFoodoo")
    /// Image `Group (1)`.
    static let group1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group (1)")
    /// Image `Group (2)`.
    static let group2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group (2)")
    /// Image `Group (3)`.
    static let group3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group (3)")
    /// Image `Group 1 (7) 2`.
    static let group172 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1 (7) 2")
    /// Image `Group 13 (2) 2`.
    static let group1322 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 13 (2) 2")
    /// Image `Group 18198`.
    static let group18198 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18198")
    /// Image `Group 18200-1`.
    static let group182001 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18200-1")
    /// Image `Group 18201 (1)`.
    static let group182011 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18201 (1)")
    /// Image `Group 18201`.
    static let group18201 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18201")
    /// Image `Group 18202`.
    static let group18202 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18202")
    /// Image `Group 18207`.
    static let group18207 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18207")
    /// Image `Group 18215`.
    static let group18215 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18215")
    /// Image `Group 18217`.
    static let group18217 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18217")
    /// Image `Group 18221`.
    static let group18221 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18221")
    /// Image `Group 18224`.
    static let group18224 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18224")
    /// Image `Group 18225`.
    static let group18225 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18225")
    /// Image `Group 18226`.
    static let group18226 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18226")
    /// Image `Group 18227`.
    static let group18227 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18227")
    /// Image `Group 18233`.
    static let group18233 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18233")
    /// Image `Group 18234`.
    static let group18234 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18234")
    /// Image `Group 18240`.
    static let group18240 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18240")
    /// Image `Group 18242`.
    static let group18242 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18242")
    /// Image `Group 18245-1`.
    static let group182451 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18245-1")
    /// Image `Group 18245`.
    static let group18245 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18245")
    /// Image `Group 18248`.
    static let group18248 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18248")
    /// Image `Group 18250`.
    static let group18250 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18250")
    /// Image `Group 18251`.
    static let group18251 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18251")
    /// Image `Group 18253`.
    static let group18253 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18253")
    /// Image `Group 18255`.
    static let group18255 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 18255")
    /// Image `Group 458`.
    static let group458 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 458")
    /// Image `Group 459`.
    static let group459 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 459")
    /// Image `Group 466`.
    static let group466 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 466")
    /// Image `Group 467`.
    static let group467 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 467")
    /// Image `Group 478`.
    static let group478 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 478")
    /// Image `Group 532`.
    static let group532 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 532")
    /// Image `Group 533`.
    static let group533 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 533")
    /// Image `Group 574`.
    static let group574 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 574")
    /// Image `Group 575`.
    static let group575 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 575")
    /// Image `Group 601 (1)`.
    static let group6011 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 601 (1)")
    /// Image `Group 61`.
    static let group61 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 61")
    /// Image `Group 647`.
    static let group647 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 647")
    /// Image `Group 649`.
    static let group649 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 649")
    /// Image `Group 676-1`.
    static let group6761 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 676-1")
    /// Image `Group 676`.
    static let group676 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 676")
    /// Image `Group 682 (1)`.
    static let group6821 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 682 (1)")
    /// Image `Group 708`.
    static let group708 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 708")
    /// Image `Group 716`.
    static let group716 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 716")
    /// Image `Group 717`.
    static let group717 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 717")
    /// Image `Group 719`.
    static let group719 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 719")
    /// Image `Group 720`.
    static let group720 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 720")
    /// Image `Group 84`.
    static let group84 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 84")
    /// Image `HeartFilled`.
    static let heartFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeartFilled")
    /// Image `HeartUnfilled`.
    static let heartUnfilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeartUnfilled")
    /// Image `HomeMenu`.
    static let homeMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "HomeMenu")
    /// Image `Home_Bottom`.
    static let home_Bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_Bottom")
    /// Image `Invite Friend`.
    static let inviteFriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "Invite Friend")
    /// Image `Line 13`.
    static let line13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line 13")
    /// Image `LocationNew`.
    static let locationNew = Rswift.ImageResource(bundle: R.hostingBundle, name: "LocationNew")
    /// Image `Logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logout")
    /// Image `Magic_Bottom`.
    static let magic_Bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "Magic_Bottom")
    /// Image `Menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "Menu")
    /// Image `PrivacyPolicy`.
    static let privacyPolicy = Rswift.ImageResource(bundle: R.hostingBundle, name: "PrivacyPolicy")
    /// Image `PromoApplied`.
    static let promoApplied = Rswift.ImageResource(bundle: R.hostingBundle, name: "PromoApplied")
    /// Image `Question`.
    static let question = Rswift.ImageResource(bundle: R.hostingBundle, name: "Question")
    /// Image `Rectangle 4911 (1)`.
    static let rectangle49111 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4911 (1)")
    /// Image `Rectangle 4912`.
    static let rectangle4912 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4912")
    /// Image `Rectangle 4913`.
    static let rectangle4913 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4913")
    /// Image `Rectangle 4951`.
    static let rectangle4951 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4951")
    /// Image `Rectangle 4952`.
    static let rectangle4952 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4952")
    /// Image `Rectangle 4953`.
    static let rectangle4953 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4953")
    /// Image `Rectangle 4954`.
    static let rectangle4954 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4954")
    /// Image `Rectangle 592 (1) 2`.
    static let rectangle59212 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 592 (1) 2")
    /// Image `Rectangle 602`.
    static let rectangle602 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 602")
    /// Image `Rectangle 603`.
    static let rectangle603 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 603")
    /// Image `Rectangle 604`.
    static let rectangle604 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 604")
    /// Image `Rectangle 605`.
    static let rectangle605 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 605")
    /// Image `Rectangle 606`.
    static let rectangle606 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 606")
    /// Image `Rectangle 615`.
    static let rectangle615 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 615")
    /// Image `Rectangle 616`.
    static let rectangle616 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 616")
    /// Image `Rectangle 617`.
    static let rectangle617 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 617")
    /// Image `Rectangle 618`.
    static let rectangle618 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 618")
    /// Image `Rectangle 619`.
    static let rectangle619 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 619")
    /// Image `RectangleChecked`.
    static let rectangleChecked = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleChecked")
    /// Image `RectangleUncheck`.
    static let rectangleUncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "RectangleUncheck")
    /// Image `Review Products`.
    static let reviewProducts = Rswift.ImageResource(bundle: R.hostingBundle, name: "Review Products")
    /// Image `SolarMoney`.
    static let solarMoney = Rswift.ImageResource(bundle: R.hostingBundle, name: "SolarMoney")
    /// Image `Splash (1)`.
    static let splash1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash (1)")
    /// Image `Splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash")
    /// Image `Term`.
    static let term = Rswift.ImageResource(bundle: R.hostingBundle, name: "Term")
    /// Image `TermsOfService`.
    static let termsOfService = Rswift.ImageResource(bundle: R.hostingBundle, name: "TermsOfService")
    /// Image `TransWallet18`.
    static let transWallet18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransWallet18")
    /// Image `TransWallet`.
    static let transWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "TransWallet")
    /// Image `Vector`.
    static let vector = Rswift.ImageResource(bundle: R.hostingBundle, name: "Vector")
    /// Image `Wallet Success`.
    static let walletSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "Wallet Success")
    /// Image `WalletAdd45`.
    static let walletAdd45 = Rswift.ImageResource(bundle: R.hostingBundle, name: "WalletAdd45")
    /// Image `Write to Us`.
    static let writeToUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "Write to Us")
    /// Image `ant-design_camera-filled`.
    static let antDesign_cameraFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "ant-design_camera-filled")
    /// Image `bag-2`.
    static let bag2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bag-2")
    /// Image `cancelRed`.
    static let cancelRed = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancelRed")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `carbon_checkbox`.
    static let carbon_checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "carbon_checkbox")
    /// Image `carbon_location-filled`.
    static let carbon_locationFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "carbon_location-filled")
    /// Image `carbon_send-alt-filled`.
    static let carbon_sendAltFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "carbon_send-alt-filled")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 1 (1)`.
    static let chickenSkewersWithSlicesSweetPeppersDill11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 1 (1)")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 10`.
    static let chickenSkewersWithSlicesSweetPeppersDill10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 10")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 1`.
    static let chickenSkewersWithSlicesSweetPeppersDill1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 1")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 2`.
    static let chickenSkewersWithSlicesSweetPeppersDill2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 2")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 3`.
    static let chickenSkewersWithSlicesSweetPeppersDill3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 3")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 4`.
    static let chickenSkewersWithSlicesSweetPeppersDill4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 4")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 5`.
    static let chickenSkewersWithSlicesSweetPeppersDill5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 5")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 6`.
    static let chickenSkewersWithSlicesSweetPeppersDill6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 6")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 7`.
    static let chickenSkewersWithSlicesSweetPeppersDill7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 7")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 8`.
    static let chickenSkewersWithSlicesSweetPeppersDill8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 8")
    /// Image `chicken-skewers-with-slices-sweet-peppers-dill 9`.
    static let chickenSkewersWithSlicesSweetPeppersDill9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "chicken-skewers-with-slices-sweet-peppers-dill 9")
    /// Image `clarity_list-line`.
    static let clarity_listLine = Rswift.ImageResource(bundle: R.hostingBundle, name: "clarity_list-line")
    /// Image `clocation`.
    static let clocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "clocation")
    /// Image `download__35_-removebg-preview 2`.
    static let download__35_RemovebgPreview2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "download__35_-removebg-preview 2")
    /// Image `edit`.
    static let edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit")
    /// Image `entypo-social_google`.
    static let entypoSocial_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "entypo-social_google")
    /// Image `fluent-mdl2_cancel`.
    static let fluentMdl2_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluent-mdl2_cancel")
    /// Image `fluent_filter-16-filled`.
    static let fluent_filter16Filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluent_filter-16-filled")
    /// Image `fluent_food-16-filled-1`.
    static let fluent_food16Filled1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluent_food-16-filled-1")
    /// Image `fluent_food-16-filled`.
    static let fluent_food16Filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluent_food-16-filled")
    /// Image `fluent_home-16-filled-1`.
    static let fluent_home16Filled1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluent_home-16-filled-1")
    /// Image `fluent_home-16-filled`.
    static let fluent_home16Filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "fluent_home-16-filled")
    /// Image `formkit_down`.
    static let formkit_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "formkit_down")
    /// Image `formkit_right`.
    static let formkit_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "formkit_right")
    /// Image `gridicons_location`.
    static let gridicons_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "gridicons_location")
    /// Image `home-2`.
    static let home2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-2")
    /// Image `humbleicons_chat-1`.
    static let humbleicons_chat1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "humbleicons_chat-1")
    /// Image `humbleicons_chat`.
    static let humbleicons_chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "humbleicons_chat")
    /// Image `ic_CheckedCircle_Black`.
    static let ic_CheckedCircle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_CheckedCircle_Black")
    /// Image `ic_Circle_Black`.
    static let ic_Circle_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Circle_Black")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `iconamoon_edit-light`.
    static let iconamoon_editLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconamoon_edit-light")
    /// Image `iconamoon_profile-light`.
    static let iconamoon_profileLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconamoon_profile-light")
    /// Image `iconoir_cancel`.
    static let iconoir_cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconoir_cancel")
    /// Image `image-55`.
    static let image55 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-55")
    /// Image `image-56`.
    static let image56 = Rswift.ImageResource(bundle: R.hostingBundle, name: "image-56")
    /// Image `language`.
    static let language = Rswift.ImageResource(bundle: R.hostingBundle, name: "language")
    /// Image `lets-icons_done-ring-round-fill`.
    static let letsIcons_doneRingRoundFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "lets-icons_done-ring-round-fill")
    /// Image `location1`.
    static let location1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "location1")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `lucide_image-plus`.
    static let lucide_imagePlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "lucide_image-plus")
    /// Image `material-symbols-light_restaurant`.
    static let materialSymbolsLight_restaurant = Rswift.ImageResource(bundle: R.hostingBundle, name: "material-symbols-light_restaurant")
    /// Image `material-symbols_call`.
    static let materialSymbols_call = Rswift.ImageResource(bundle: R.hostingBundle, name: "material-symbols_call")
    /// Image `material-symbols_keyboard-arrow-down`.
    static let materialSymbols_keyboardArrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "material-symbols_keyboard-arrow-down")
    /// Image `mdi_checkbox-blank-circle-outline`.
    static let mdi_checkboxBlankCircleOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdi_checkbox-blank-circle-outline")
    /// Image `mdi_checkbox-blank-circle`.
    static let mdi_checkboxBlankCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdi_checkbox-blank-circle")
    /// Image `mdi_eye-off`.
    static let mdi_eyeOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdi_eye-off")
    /// Image `mdi_food-1`.
    static let mdi_food1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdi_food-1")
    /// Image `mdi_food`.
    static let mdi_food = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdi_food")
    /// Image `mdi_heart-outline`.
    static let mdi_heartOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdi_heart-outline")
    /// Image `mdi_heart`.
    static let mdi_heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "mdi_heart")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder")
    /// Image `profile_ic`.
    static let profile_ic = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile_ic")
    /// Image `rating`.
    static let rating = Rswift.ImageResource(bundle: R.hostingBundle, name: "rating")
    /// Image `ri_checkbox-fill`.
    static let ri_checkboxFill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ri_checkbox-fill")
    /// Image `ri_search-2-line`.
    static let ri_search2Line = Rswift.ImageResource(bundle: R.hostingBundle, name: "ri_search-2-line")
    /// Image `shield-tick 1`.
    static let shieldTick1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "shield-tick 1")
    /// Image `simple-line-icons_energy`.
    static let simpleLineIcons_energy = Rswift.ImageResource(bundle: R.hostingBundle, name: "simple-line-icons_energy")
    /// Image `sms-edit`.
    static let smsEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "sms-edit")
    /// Image `solar_hand-money-broken`.
    static let solar_handMoneyBroken = Rswift.ImageResource(bundle: R.hostingBundle, name: "solar_hand-money-broken")
    /// Image `uiw_date`.
    static let uiw_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "uiw_date")
    /// Image `uiw_logout`.
    static let uiw_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "uiw_logout")
    /// Image `uiw_setting-1`.
    static let uiw_setting1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "uiw_setting-1")
    /// Image `uiw_setting`.
    static let uiw_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "uiw_setting")
    /// Image `user-add`.
    static let userAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "user-add")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Cart", bundle: ..., traitCollection: ...)`
    static func cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ChangePassword", bundle: ..., traitCollection: ...)`
    static func changePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.changePassword, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CircleUncheck", bundle: ..., traitCollection: ...)`
    static func circleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 25", bundle: ..., traitCollection: ...)`
    static func ellipse25(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse25, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 73", bundle: ..., traitCollection: ...)`
    static func ellipse73(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse73, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 74", bundle: ..., traitCollection: ...)`
    static func ellipse74(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse74, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 75", bundle: ..., traitCollection: ...)`
    static func ellipse75(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse75, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 76", bundle: ..., traitCollection: ...)`
    static func ellipse76(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse76, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 88", bundle: ..., traitCollection: ...)`
    static func ellipse88(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse88, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 89", bundle: ..., traitCollection: ...)`
    static func ellipse89(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse89, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 90", bundle: ..., traitCollection: ...)`
    static func ellipse90(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse90, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Ellipse 91", bundle: ..., traitCollection: ...)`
    static func ellipse91(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse91, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FAQ", bundle: ..., traitCollection: ...)`
    static func faQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faQ, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Frame (1)", bundle: ..., traitCollection: ...)`
    static func frame1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.frame1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GOFOODOO-FF 1", bundle: ..., traitCollection: ...)`
    static func gofoodooff1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gofoodooff1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Go Green,GoFoodoo", bundle: ..., traitCollection: ...)`
    static func goGreenGoFoodoo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.goGreenGoFoodoo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group (1)", bundle: ..., traitCollection: ...)`
    static func group1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group (2)", bundle: ..., traitCollection: ...)`
    static func group2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group (3)", bundle: ..., traitCollection: ...)`
    static func group3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 1 (7) 2", bundle: ..., traitCollection: ...)`
    static func group172(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group172, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 13 (2) 2", bundle: ..., traitCollection: ...)`
    static func group1322(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1322, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18198", bundle: ..., traitCollection: ...)`
    static func group18198(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18198, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18200-1", bundle: ..., traitCollection: ...)`
    static func group182001(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group182001, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18201 (1)", bundle: ..., traitCollection: ...)`
    static func group182011(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group182011, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18201", bundle: ..., traitCollection: ...)`
    static func group18201(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18201, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18202", bundle: ..., traitCollection: ...)`
    static func group18202(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18202, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18207", bundle: ..., traitCollection: ...)`
    static func group18207(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18207, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18215", bundle: ..., traitCollection: ...)`
    static func group18215(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18215, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18217", bundle: ..., traitCollection: ...)`
    static func group18217(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18217, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18221", bundle: ..., traitCollection: ...)`
    static func group18221(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18221, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18224", bundle: ..., traitCollection: ...)`
    static func group18224(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18224, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18225", bundle: ..., traitCollection: ...)`
    static func group18225(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18225, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18226", bundle: ..., traitCollection: ...)`
    static func group18226(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18226, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18227", bundle: ..., traitCollection: ...)`
    static func group18227(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18227, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18233", bundle: ..., traitCollection: ...)`
    static func group18233(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18233, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18234", bundle: ..., traitCollection: ...)`
    static func group18234(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18234, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18240", bundle: ..., traitCollection: ...)`
    static func group18240(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18240, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18242", bundle: ..., traitCollection: ...)`
    static func group18242(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18242, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18245", bundle: ..., traitCollection: ...)`
    static func group18245(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18245, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18245-1", bundle: ..., traitCollection: ...)`
    static func group182451(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group182451, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18248", bundle: ..., traitCollection: ...)`
    static func group18248(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18248, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18250", bundle: ..., traitCollection: ...)`
    static func group18250(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18250, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18251", bundle: ..., traitCollection: ...)`
    static func group18251(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18251, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18253", bundle: ..., traitCollection: ...)`
    static func group18253(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18253, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 18255", bundle: ..., traitCollection: ...)`
    static func group18255(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group18255, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 458", bundle: ..., traitCollection: ...)`
    static func group458(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group458, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 459", bundle: ..., traitCollection: ...)`
    static func group459(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group459, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 466", bundle: ..., traitCollection: ...)`
    static func group466(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group466, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 467", bundle: ..., traitCollection: ...)`
    static func group467(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group467, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 478", bundle: ..., traitCollection: ...)`
    static func group478(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group478, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 532", bundle: ..., traitCollection: ...)`
    static func group532(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group532, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 533", bundle: ..., traitCollection: ...)`
    static func group533(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group533, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 574", bundle: ..., traitCollection: ...)`
    static func group574(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group574, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 575", bundle: ..., traitCollection: ...)`
    static func group575(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group575, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 601 (1)", bundle: ..., traitCollection: ...)`
    static func group6011(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group6011, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 61", bundle: ..., traitCollection: ...)`
    static func group61(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group61, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 647", bundle: ..., traitCollection: ...)`
    static func group647(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group647, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 649", bundle: ..., traitCollection: ...)`
    static func group649(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group649, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 676", bundle: ..., traitCollection: ...)`
    static func group676(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group676, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 676-1", bundle: ..., traitCollection: ...)`
    static func group6761(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group6761, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 682 (1)", bundle: ..., traitCollection: ...)`
    static func group6821(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group6821, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 708", bundle: ..., traitCollection: ...)`
    static func group708(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group708, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 716", bundle: ..., traitCollection: ...)`
    static func group716(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group716, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 717", bundle: ..., traitCollection: ...)`
    static func group717(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group717, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 719", bundle: ..., traitCollection: ...)`
    static func group719(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group719, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 720", bundle: ..., traitCollection: ...)`
    static func group720(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group720, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 84", bundle: ..., traitCollection: ...)`
    static func group84(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group84, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeartFilled", bundle: ..., traitCollection: ...)`
    static func heartFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HeartUnfilled", bundle: ..., traitCollection: ...)`
    static func heartUnfilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heartUnfilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HomeMenu", bundle: ..., traitCollection: ...)`
    static func homeMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Home_Bottom", bundle: ..., traitCollection: ...)`
    static func home_Bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_Bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Invite Friend", bundle: ..., traitCollection: ...)`
    static func inviteFriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.inviteFriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Line 13", bundle: ..., traitCollection: ...)`
    static func line13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LocationNew", bundle: ..., traitCollection: ...)`
    static func locationNew(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationNew, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Magic_Bottom", bundle: ..., traitCollection: ...)`
    static func magic_Bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.magic_Bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PrivacyPolicy", bundle: ..., traitCollection: ...)`
    static func privacyPolicy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.privacyPolicy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "PromoApplied", bundle: ..., traitCollection: ...)`
    static func promoApplied(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.promoApplied, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Question", bundle: ..., traitCollection: ...)`
    static func question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.question, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 4911 (1)", bundle: ..., traitCollection: ...)`
    static func rectangle49111(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle49111, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 4912", bundle: ..., traitCollection: ...)`
    static func rectangle4912(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4912, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 4913", bundle: ..., traitCollection: ...)`
    static func rectangle4913(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4913, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 4951", bundle: ..., traitCollection: ...)`
    static func rectangle4951(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4951, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 4952", bundle: ..., traitCollection: ...)`
    static func rectangle4952(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4952, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 4953", bundle: ..., traitCollection: ...)`
    static func rectangle4953(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4953, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 4954", bundle: ..., traitCollection: ...)`
    static func rectangle4954(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4954, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 592 (1) 2", bundle: ..., traitCollection: ...)`
    static func rectangle59212(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle59212, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 602", bundle: ..., traitCollection: ...)`
    static func rectangle602(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle602, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 603", bundle: ..., traitCollection: ...)`
    static func rectangle603(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle603, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 604", bundle: ..., traitCollection: ...)`
    static func rectangle604(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle604, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 605", bundle: ..., traitCollection: ...)`
    static func rectangle605(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle605, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 606", bundle: ..., traitCollection: ...)`
    static func rectangle606(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle606, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 615", bundle: ..., traitCollection: ...)`
    static func rectangle615(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle615, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 616", bundle: ..., traitCollection: ...)`
    static func rectangle616(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle616, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 617", bundle: ..., traitCollection: ...)`
    static func rectangle617(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle617, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 618", bundle: ..., traitCollection: ...)`
    static func rectangle618(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle618, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Rectangle 619", bundle: ..., traitCollection: ...)`
    static func rectangle619(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle619, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleChecked", bundle: ..., traitCollection: ...)`
    static func rectangleChecked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleChecked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RectangleUncheck", bundle: ..., traitCollection: ...)`
    static func rectangleUncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangleUncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Review Products", bundle: ..., traitCollection: ...)`
    static func reviewProducts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reviewProducts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SolarMoney", bundle: ..., traitCollection: ...)`
    static func solarMoney(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solarMoney, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Splash (1)", bundle: ..., traitCollection: ...)`
    static func splash1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Term", bundle: ..., traitCollection: ...)`
    static func term(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.term, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TermsOfService", bundle: ..., traitCollection: ...)`
    static func termsOfService(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.termsOfService, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TransWallet", bundle: ..., traitCollection: ...)`
    static func transWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transWallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TransWallet18", bundle: ..., traitCollection: ...)`
    static func transWallet18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transWallet18, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Vector", bundle: ..., traitCollection: ...)`
    static func vector(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.vector, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Wallet Success", bundle: ..., traitCollection: ...)`
    static func walletSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "WalletAdd45", bundle: ..., traitCollection: ...)`
    static func walletAdd45(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.walletAdd45, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Write to Us", bundle: ..., traitCollection: ...)`
    static func writeToUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.writeToUs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ant-design_camera-filled", bundle: ..., traitCollection: ...)`
    static func antDesign_cameraFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.antDesign_cameraFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bag-2", bundle: ..., traitCollection: ...)`
    static func bag2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bag2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancelRed", bundle: ..., traitCollection: ...)`
    static func cancelRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancelRed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carbon_checkbox", bundle: ..., traitCollection: ...)`
    static func carbon_checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carbon_checkbox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carbon_location-filled", bundle: ..., traitCollection: ...)`
    static func carbon_locationFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carbon_locationFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carbon_send-alt-filled", bundle: ..., traitCollection: ...)`
    static func carbon_sendAltFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carbon_sendAltFilled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 1 (1)", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 1", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 10", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 2", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 3", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 4", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 5", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 6", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 7", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 8", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 9", bundle: ..., traitCollection: ...)`
    static func chickenSkewersWithSlicesSweetPeppersDill9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chickenSkewersWithSlicesSweetPeppersDill9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clarity_list-line", bundle: ..., traitCollection: ...)`
    static func clarity_listLine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clarity_listLine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clocation", bundle: ..., traitCollection: ...)`
    static func clocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "download__35_-removebg-preview 2", bundle: ..., traitCollection: ...)`
    static func download__35_RemovebgPreview2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download__35_RemovebgPreview2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit", bundle: ..., traitCollection: ...)`
    static func edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "entypo-social_google", bundle: ..., traitCollection: ...)`
    static func entypoSocial_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.entypoSocial_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluent-mdl2_cancel", bundle: ..., traitCollection: ...)`
    static func fluentMdl2_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluentMdl2_cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluent_filter-16-filled", bundle: ..., traitCollection: ...)`
    static func fluent_filter16Filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluent_filter16Filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluent_food-16-filled", bundle: ..., traitCollection: ...)`
    static func fluent_food16Filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluent_food16Filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluent_food-16-filled-1", bundle: ..., traitCollection: ...)`
    static func fluent_food16Filled1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluent_food16Filled1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluent_home-16-filled", bundle: ..., traitCollection: ...)`
    static func fluent_home16Filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluent_home16Filled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fluent_home-16-filled-1", bundle: ..., traitCollection: ...)`
    static func fluent_home16Filled1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fluent_home16Filled1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "formkit_down", bundle: ..., traitCollection: ...)`
    static func formkit_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.formkit_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "formkit_right", bundle: ..., traitCollection: ...)`
    static func formkit_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.formkit_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gridicons_location", bundle: ..., traitCollection: ...)`
    static func gridicons_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gridicons_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-2", bundle: ..., traitCollection: ...)`
    static func home2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "humbleicons_chat", bundle: ..., traitCollection: ...)`
    static func humbleicons_chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humbleicons_chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "humbleicons_chat-1", bundle: ..., traitCollection: ...)`
    static func humbleicons_chat1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humbleicons_chat1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_CheckedCircle_Black", bundle: ..., traitCollection: ...)`
    static func ic_CheckedCircle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_CheckedCircle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Circle_Black", bundle: ..., traitCollection: ...)`
    static func ic_Circle_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Circle_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconamoon_edit-light", bundle: ..., traitCollection: ...)`
    static func iconamoon_editLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconamoon_editLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconamoon_profile-light", bundle: ..., traitCollection: ...)`
    static func iconamoon_profileLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconamoon_profileLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconoir_cancel", bundle: ..., traitCollection: ...)`
    static func iconoir_cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconoir_cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image-55", bundle: ..., traitCollection: ...)`
    static func image55(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image55, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "image-56", bundle: ..., traitCollection: ...)`
    static func image56(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.image56, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "language", bundle: ..., traitCollection: ...)`
    static func language(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.language, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lets-icons_done-ring-round-fill", bundle: ..., traitCollection: ...)`
    static func letsIcons_doneRingRoundFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.letsIcons_doneRingRoundFill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location1", bundle: ..., traitCollection: ...)`
    static func location1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lucide_image-plus", bundle: ..., traitCollection: ...)`
    static func lucide_imagePlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lucide_imagePlus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "material-symbols-light_restaurant", bundle: ..., traitCollection: ...)`
    static func materialSymbolsLight_restaurant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.materialSymbolsLight_restaurant, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "material-symbols_call", bundle: ..., traitCollection: ...)`
    static func materialSymbols_call(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.materialSymbols_call, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "material-symbols_keyboard-arrow-down", bundle: ..., traitCollection: ...)`
    static func materialSymbols_keyboardArrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.materialSymbols_keyboardArrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdi_checkbox-blank-circle", bundle: ..., traitCollection: ...)`
    static func mdi_checkboxBlankCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdi_checkboxBlankCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdi_checkbox-blank-circle-outline", bundle: ..., traitCollection: ...)`
    static func mdi_checkboxBlankCircleOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdi_checkboxBlankCircleOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdi_eye-off", bundle: ..., traitCollection: ...)`
    static func mdi_eyeOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdi_eyeOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdi_food", bundle: ..., traitCollection: ...)`
    static func mdi_food(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdi_food, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdi_food-1", bundle: ..., traitCollection: ...)`
    static func mdi_food1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdi_food1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdi_heart", bundle: ..., traitCollection: ...)`
    static func mdi_heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdi_heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mdi_heart-outline", bundle: ..., traitCollection: ...)`
    static func mdi_heartOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mdi_heartOutline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile_ic", bundle: ..., traitCollection: ...)`
    static func profile_ic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile_ic, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rating", bundle: ..., traitCollection: ...)`
    static func rating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rating, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ri_checkbox-fill", bundle: ..., traitCollection: ...)`
    static func ri_checkboxFill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ri_checkboxFill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ri_search-2-line", bundle: ..., traitCollection: ...)`
    static func ri_search2Line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ri_search2Line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shield-tick 1", bundle: ..., traitCollection: ...)`
    static func shieldTick1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shieldTick1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "simple-line-icons_energy", bundle: ..., traitCollection: ...)`
    static func simpleLineIcons_energy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.simpleLineIcons_energy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sms-edit", bundle: ..., traitCollection: ...)`
    static func smsEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.smsEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "solar_hand-money-broken", bundle: ..., traitCollection: ...)`
    static func solar_handMoneyBroken(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.solar_handMoneyBroken, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uiw_date", bundle: ..., traitCollection: ...)`
    static func uiw_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uiw_date, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uiw_logout", bundle: ..., traitCollection: ...)`
    static func uiw_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uiw_logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uiw_setting", bundle: ..., traitCollection: ...)`
    static func uiw_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uiw_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "uiw_setting-1", bundle: ..., traitCollection: ...)`
    static func uiw_setting1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uiw_setting1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user-add", bundle: ..., traitCollection: ...)`
    static func userAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userAdd, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 21 nibs.
  struct nib {
    /// Nib `AddedCartCell`.
    static let addedCartCell = _R.nib._AddedCartCell()
    /// Nib `AllResCell`.
    static let allResCell = _R.nib._AllResCell()
    /// Nib `AllReviewCell`.
    static let allReviewCell = _R.nib._AllReviewCell()
    /// Nib `AnswerCell`.
    static let answerCell = _R.nib._AnswerCell()
    /// Nib `BagAndFoodCell`.
    static let bagAndFoodCell = _R.nib._BagAndFoodCell()
    /// Nib `BakeryMenuCell`.
    static let bakeryMenuCell = _R.nib._BakeryMenuCell()
    /// Nib `ExtraItemCell`.
    static let extraItemCell = _R.nib._ExtraItemCell()
    /// Nib `FavCell`.
    static let favCell = _R.nib._FavCell()
    /// Nib `FoodOrderCell`.
    static let foodOrderCell = _R.nib._FoodOrderCell()
    /// Nib `FoodTypeCell`.
    static let foodTypeCell = _R.nib._FoodTypeCell()
    /// Nib `ImgCell`.
    static let imgCell = _R.nib._ImgCell()
    /// Nib `ItemsCell`.
    static let itemsCell = _R.nib._ItemsCell()
    /// Nib `NotifyCell`.
    static let notifyCell = _R.nib._NotifyCell()
    /// Nib `OrderCell`.
    static let orderCell = _R.nib._OrderCell()
    /// Nib `OrderDetailCell`.
    static let orderDetailCell = _R.nib._OrderDetailCell()
    /// Nib `PlacedOrderCell`.
    static let placedOrderCell = _R.nib._PlacedOrderCell()
    /// Nib `QuestionCell`.
    static let questionCell = _R.nib._QuestionCell()
    /// Nib `RestaurantCell`.
    static let restaurantCell = _R.nib._RestaurantCell()
    /// Nib `ShopCategoryCell`.
    static let shopCategoryCell = _R.nib._ShopCategoryCell()
    /// Nib `ToggleCell`.
    static let toggleCell = _R.nib._ToggleCell()
    /// Nib `WalletTransactionCell`.
    static let walletTransactionCell = _R.nib._WalletTransactionCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddedCartCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addedCartCell) instead")
    static func addedCartCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addedCartCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AllResCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allResCell) instead")
    static func allResCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allResCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AllReviewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allReviewCell) instead")
    static func allReviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allReviewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AnswerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.answerCell) instead")
    static func answerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.answerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BagAndFoodCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bagAndFoodCell) instead")
    static func bagAndFoodCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bagAndFoodCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BakeryMenuCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bakeryMenuCell) instead")
    static func bakeryMenuCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bakeryMenuCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExtraItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.extraItemCell) instead")
    static func extraItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.extraItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FavCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.favCell) instead")
    static func favCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.favCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodOrderCell) instead")
    static func foodOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodOrderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FoodTypeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.foodTypeCell) instead")
    static func foodTypeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.foodTypeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImgCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imgCell) instead")
    static func imgCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imgCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ItemsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.itemsCell) instead")
    static func itemsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotifyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notifyCell) instead")
    static func notifyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notifyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderCell) instead")
    static func orderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "OrderDetailCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.orderDetailCell) instead")
    static func orderDetailCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDetailCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PlacedOrderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.placedOrderCell) instead")
    static func placedOrderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.placedOrderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QuestionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.questionCell) instead")
    static func questionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.questionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RestaurantCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.restaurantCell) instead")
    static func restaurantCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restaurantCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ShopCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.shopCategoryCell) instead")
    static func shopCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopCategoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ToggleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toggleCell) instead")
    static func toggleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toggleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WalletTransactionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.walletTransactionCell) instead")
    static func walletTransactionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletTransactionCell)
    }
    #endif

    static func addedCartCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddedCartCell? {
      return R.nib.addedCartCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddedCartCell
    }

    static func allResCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllResCell? {
      return R.nib.allResCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllResCell
    }

    static func allReviewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllReviewCell? {
      return R.nib.allReviewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllReviewCell
    }

    static func answerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerCell? {
      return R.nib.answerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerCell
    }

    static func bagAndFoodCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BagAndFoodCell? {
      return R.nib.bagAndFoodCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BagAndFoodCell
    }

    static func bakeryMenuCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BakeryMenuCell? {
      return R.nib.bakeryMenuCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BakeryMenuCell
    }

    static func extraItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExtraItemCell? {
      return R.nib.extraItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExtraItemCell
    }

    static func favCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavCell? {
      return R.nib.favCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavCell
    }

    static func foodOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodOrderCell? {
      return R.nib.foodOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodOrderCell
    }

    static func foodTypeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodTypeCell? {
      return R.nib.foodTypeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodTypeCell
    }

    static func imgCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImgCell? {
      return R.nib.imgCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImgCell
    }

    static func itemsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemsCell? {
      return R.nib.itemsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemsCell
    }

    static func notifyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotifyCell? {
      return R.nib.notifyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotifyCell
    }

    static func orderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderCell? {
      return R.nib.orderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
    }

    static func orderDetailCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderDetailCell? {
      return R.nib.orderDetailCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDetailCell
    }

    static func placedOrderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlacedOrderCell? {
      return R.nib.placedOrderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlacedOrderCell
    }

    static func questionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCell? {
      return R.nib.questionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCell
    }

    static func restaurantCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestaurantCell? {
      return R.nib.restaurantCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantCell
    }

    static func shopCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShopCategoryCell? {
      return R.nib.shopCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopCategoryCell
    }

    static func toggleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToggleCell? {
      return R.nib.toggleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToggleCell
    }

    static func walletTransactionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletTransactionCell? {
      return R.nib.walletTransactionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletTransactionCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 18 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddedCartCell`.
    static let addedCartCell: Rswift.ReuseIdentifier<AddedCartCell> = Rswift.ReuseIdentifier(identifier: "AddedCartCell")
    /// Reuse identifier `AllResCell`.
    static let allResCell: Rswift.ReuseIdentifier<AllResCell> = Rswift.ReuseIdentifier(identifier: "AllResCell")
    /// Reuse identifier `AllReviewCell`.
    static let allReviewCell: Rswift.ReuseIdentifier<AllReviewCell> = Rswift.ReuseIdentifier(identifier: "AllReviewCell")
    /// Reuse identifier `BagAndFoodCell`.
    static let bagAndFoodCell: Rswift.ReuseIdentifier<BagAndFoodCell> = Rswift.ReuseIdentifier(identifier: "BagAndFoodCell")
    /// Reuse identifier `BakeryMenuCell`.
    static let bakeryMenuCell: Rswift.ReuseIdentifier<BakeryMenuCell> = Rswift.ReuseIdentifier(identifier: "BakeryMenuCell")
    /// Reuse identifier `FavCell`.
    static let favCell: Rswift.ReuseIdentifier<FavCell> = Rswift.ReuseIdentifier(identifier: "FavCell")
    /// Reuse identifier `FoodOrderCell`.
    static let foodOrderCell: Rswift.ReuseIdentifier<FoodOrderCell> = Rswift.ReuseIdentifier(identifier: "FoodOrderCell")
    /// Reuse identifier `FoodTypeCell`.
    static let foodTypeCell: Rswift.ReuseIdentifier<FoodTypeCell> = Rswift.ReuseIdentifier(identifier: "FoodTypeCell")
    /// Reuse identifier `ImgCell`.
    static let imgCell: Rswift.ReuseIdentifier<ImgCell> = Rswift.ReuseIdentifier(identifier: "ImgCell")
    /// Reuse identifier `ItemsCell`.
    static let itemsCell: Rswift.ReuseIdentifier<ItemsCell> = Rswift.ReuseIdentifier(identifier: "ItemsCell")
    /// Reuse identifier `NotifyCell`.
    static let notifyCell: Rswift.ReuseIdentifier<NotifyCell> = Rswift.ReuseIdentifier(identifier: "NotifyCell")
    /// Reuse identifier `OrderCell`.
    static let orderCell: Rswift.ReuseIdentifier<OrderCell> = Rswift.ReuseIdentifier(identifier: "OrderCell")
    /// Reuse identifier `OrderDetailCell`.
    static let orderDetailCell: Rswift.ReuseIdentifier<OrderDetailCell> = Rswift.ReuseIdentifier(identifier: "OrderDetailCell")
    /// Reuse identifier `PlacedOrderCell`.
    static let placedOrderCell: Rswift.ReuseIdentifier<PlacedOrderCell> = Rswift.ReuseIdentifier(identifier: "PlacedOrderCell")
    /// Reuse identifier `RestaurantCell`.
    static let restaurantCell: Rswift.ReuseIdentifier<RestaurantCell> = Rswift.ReuseIdentifier(identifier: "RestaurantCell")
    /// Reuse identifier `ShopCategoryCell`.
    static let shopCategoryCell: Rswift.ReuseIdentifier<ShopCategoryCell> = Rswift.ReuseIdentifier(identifier: "ShopCategoryCell")
    /// Reuse identifier `ToggleCell`.
    static let toggleCell: Rswift.ReuseIdentifier<ToggleCell> = Rswift.ReuseIdentifier(identifier: "ToggleCell")
    /// Reuse identifier `searchLocationCell`.
    static let searchLocationCell: Rswift.ReuseIdentifier<SearchLocationCell> = Rswift.ReuseIdentifier(identifier: "searchLocationCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 189 localization keys.
    struct localizable {
      /// en translation: 0 CAD
      ///
      /// Locales: en, ar, tr
      static let caD = Rswift.StringResource(key: "0 CAD", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: 2972 Westheimer Rd. Santa Ana                                       2972 Westheimer Rd. Santa Ana
      ///
      /// Locales: en, ar, tr
      static let westheimerRdSantaAna2972WestheimerRdSantaAna = Rswift.StringResource(key: "2972 Westheimer Rd. Santa Ana                                       2972 Westheimer Rd. Santa Ana", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: 2ddddeee
      ///
      /// Locales: en, ar, tr
      static let ddddeee = Rswift.StringResource(key: "2ddddeee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: A code has been sent to +918982484814
      ///
      /// Locales: en, ar, tr
      static let aCodeHasBeenSentTo918982484814 = Rswift.StringResource(key: "A code has been sent to +918982484814", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: About
      ///
      /// Locales: en, ar, tr
      static let about = Rswift.StringResource(key: "About", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Add Extra item
      ///
      /// Locales: en, ar, tr
      static let addExtraItem = Rswift.StringResource(key: "Add Extra item", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Add Promo Code
      ///
      /// Locales: en, ar, tr
      static let addPromoCode = Rswift.StringResource(key: "Add Promo Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Add to cart
      ///
      /// Locales: en, ar, tr
      static let addToCart = Rswift.StringResource(key: "Add to cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Address
      ///
      /// Locales: en, ar, tr
      static let address = Rswift.StringResource(key: "Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: All Time
      ///
      /// Locales: en, ar, tr
      static let allTime = Rswift.StringResource(key: "All Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Already have an account ?
      ///
      /// Locales: en, ar, tr
      static let alreadyHaveAnAccount = Rswift.StringResource(key: "Already have an account ?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, ar, tr
      static let amount = Rswift.StringResource(key: "Amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Apply
      ///
      /// Locales: en, ar, tr
      static let apply = Rswift.StringResource(key: "Apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Arabic
      ///
      /// Locales: en, ar, tr
      static let arabic = Rswift.StringResource(key: "Arabic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Arbaz sheikh
      ///
      /// Locales: en, ar, tr
      static let arbazSheikh = Rswift.StringResource(key: "Arbaz sheikh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Back to Home
      ///
      /// Locales: en, ar, tr
      static let backToHome = Rswift.StringResource(key: "Back to Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Button
      ///
      /// Locales: en, ar, tr
      static let button = Rswift.StringResource(key: "Button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: C02e avoide
      ///
      /// Locales: en, ar, tr
      static let c02eAvoide = Rswift.StringResource(key: "C02e avoide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ar, tr
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Card Number
      ///
      /// Locales: en, ar, tr
      static let cardNumber = Rswift.StringResource(key: "Card Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Card is incomplete
      ///
      /// Locales: en, ar, tr
      static let cardIsIncomplete = Rswift.StringResource(key: "Card is incomplete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Card is invalid
      ///
      /// Locales: en, ar, tr
      static let cardIsInvalid = Rswift.StringResource(key: "Card is invalid", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Change Password
      ///
      /// Locales: en, ar, tr
      static let changePassword = Rswift.StringResource(key: "Change Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Chicken skewers with slices sweet peppers
      ///
      /// Locales: en, ar, tr
      static let chickenSkewersWithSlicesSweetPeppers = Rswift.StringResource(key: "Chicken skewers with slices sweet peppers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Choose Your Language
      ///
      /// Locales: en, ar, tr
      static let chooseYourLanguage = Rswift.StringResource(key: "Choose Your Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Choose this location
      ///
      /// Locales: en, ar, tr
      static let chooseThisLocation = Rswift.StringResource(key: "Choose this location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Completed
      ///
      /// Locales: en, ar, tr
      static let completed = Rswift.StringResource(key: "Completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Confirm Password
      ///
      /// Locales: en, ar, tr
      static let confirmPassword = Rswift.StringResource(key: "Confirm Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Current Password
      ///
      /// Locales: en, ar, tr
      static let currentPassword = Rswift.StringResource(key: "Current Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: DONE
      ///
      /// Locales: en, ar, tr
      static let donE = Rswift.StringResource(key: "DONE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Daily Deal
      ///
      /// Locales: en, ar, tr
      static let dailyDeal = Rswift.StringResource(key: "Daily Deal", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Deit Type
      ///
      /// Locales: en, ar, tr
      static let deitType = Rswift.StringResource(key: "Deit Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Delivery Fee
      ///
      /// Locales: en, ar, tr
      static let deliveryFee = Rswift.StringResource(key: "Delivery Fee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Discount
      ///
      /// Locales: en, ar, tr
      static let discount = Rswift.StringResource(key: "Discount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Discount Food
      ///
      /// Locales: en, ar, tr
      static let discountFood = Rswift.StringResource(key: "Discount Food", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Discounts
      ///
      /// Locales: en, ar, tr
      static let discounts = Rswift.StringResource(key: "Discounts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Dismiss
      ///
      /// Locales: en, ar, tr
      static let dismiss = Rswift.StringResource(key: "Dismiss", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Don't Receive a Code?
      ///
      /// Locales: en, ar, tr
      static let donTReceiveACode = Rswift.StringResource(key: "Don't Receive a Code?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Don't have an account?
      ///
      /// Locales: en, ar, tr
      static let donTHaveAnAccount = Rswift.StringResource(key: "Don't have an account?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, ar, tr
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, ar, tr
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Enter
      ///
      /// Locales: en, ar, tr
      static let enter = Rswift.StringResource(key: "Enter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Enter card number
      ///
      /// Locales: en, ar, tr
      static let enterCardNumber = Rswift.StringResource(key: "Enter card number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Enter expiry date
      ///
      /// Locales: en, ar, tr
      static let enterExpiryDate = Rswift.StringResource(key: "Enter expiry date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Enter name on card
      ///
      /// Locales: en, ar, tr
      static let enterNameOnCard = Rswift.StringResource(key: "Enter name on card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Enter security code
      ///
      /// Locales: en, ar, tr
      static let enterSecurityCode = Rswift.StringResource(key: "Enter security code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Enter verification code
      ///
      /// Locales: en, ar, tr
      static let enterVerificationCode = Rswift.StringResource(key: "Enter verification code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Enter your email address to reset your password
      ///
      /// Locales: en, ar, tr
      static let enterYourEmailAddressToResetYourPassword = Rswift.StringResource(key: "Enter your email address to reset your password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Expiry Date
      ///
      /// Locales: en, ar, tr
      static let expiryDate = Rswift.StringResource(key: "Expiry Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: FAQ
      ///
      /// Locales: en, ar, tr
      static let faQ = Rswift.StringResource(key: "FAQ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Favourite
      ///
      /// Locales: en, ar, tr
      static let favourite = Rswift.StringResource(key: "Favourite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Fill me up. start ordering!
      ///
      /// Locales: en, ar, tr
      static let fillMeUpStartOrdering = Rswift.StringResource(key: "Fill me up. start ordering!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Filter
      ///
      /// Locales: en, ar, tr
      static let filter = Rswift.StringResource(key: "Filter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Find Your Shop
      ///
      /// Locales: en, ar, tr
      static let findYourShop = Rswift.StringResource(key: "Find Your Shop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: First Name
      ///
      /// Locales: en, ar, tr
      static let firstName = Rswift.StringResource(key: "First Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Food Type
      ///
      /// Locales: en, ar, tr
      static let foodType = Rswift.StringResource(key: "Food Type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: From Time
      ///
      /// Locales: en, ar, tr
      static let fromTime = Rswift.StringResource(key: "From Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Give Rating
      ///
      /// Locales: en, ar, tr
      static let giveRating = Rswift.StringResource(key: "Give Rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Go To Cart
      ///
      /// Locales: en, ar, tr
      static let goToCart = Rswift.StringResource(key: "Go To Cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Help
      ///
      /// Locales: en, ar, tr
      static let help = Rswift.StringResource(key: "Help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en, ar, tr
      static let home = Rswift.StringResource(key: "Home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: How can we help you?
      ///
      /// Locales: en, ar, tr
      static let howCanWeHelpYou = Rswift.StringResource(key: "How can we help you?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: I have read the Terms & Conditions and accept them
      ///
      /// Locales: en, ar, tr
      static let iHaveReadTheTermsConditionsAndAcceptThem = Rswift.StringResource(key: "I have read the Terms & Conditions and accept them", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: ITEM
      ///
      /// Locales: en, ar, tr
      static let iteM = Rswift.StringResource(key: "ITEM", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: ITEMS
      ///
      /// Locales: en, ar, tr
      static let itemS = Rswift.StringResource(key: "ITEMS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: ITEMS left
      ///
      /// Locales: en, ar, tr
      static let itemsLeft = Rswift.StringResource(key: "ITEMS left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: In Progress
      ///
      /// Locales: en, ar, tr
      static let inProgress = Rswift.StringResource(key: "In Progress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Invalid Otp
      ///
      /// Locales: en, ar, tr
      static let invalidOtp = Rswift.StringResource(key: "Invalid Otp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Invite your friends
      ///
      /// Locales: en, ar, tr
      static let inviteYourFriends = Rswift.StringResource(key: "Invite your friends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Item Added to Cart
      ///
      /// Locales: en, ar, tr
      static let itemAddedToCart = Rswift.StringResource(key: "Item Added to Cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Items
      ///
      /// Locales: en, ar, tr
      static let items = Rswift.StringResource(key: "Items", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Label
      ///
      /// Locales: en, ar, tr
      static let label = Rswift.StringResource(key: "Label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, ar, tr
      static let language = Rswift.StringResource(key: "Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Last Name
      ///
      /// Locales: en, ar, tr
      static let lastName = Rswift.StringResource(key: "Last Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Listing
      ///
      /// Locales: en, ar, tr
      static let listing = Rswift.StringResource(key: "Listing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Loading
      ///
      /// Locales: en, ar, tr
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, ar, tr
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Location Not Found
      ///
      /// Locales: en, ar, tr
      static let locationNotFound = Rswift.StringResource(key: "Location Not Found", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Login
      ///
      /// Locales: en, ar, tr
      static let login = Rswift.StringResource(key: "Login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Login Now
      ///
      /// Locales: en, ar, tr
      static let loginNow = Rswift.StringResource(key: "Login Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Login with Google Account
      ///
      /// Locales: en, ar, tr
      static let loginWithGoogleAccount = Rswift.StringResource(key: "Login with Google Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en, ar, tr
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Map
      ///
      /// Locales: en, ar, tr
      static let map = Rswift.StringResource(key: "Map", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: McDonald's
      ///
      /// Locales: en, ar, tr
      static let mcDonaldS = Rswift.StringResource(key: "McDonald's", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Mobile
      ///
      /// Locales: en, ar, tr
      static let mobile = Rswift.StringResource(key: "Mobile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Money Saved
      ///
      /// Locales: en, ar, tr
      static let moneySaved = Rswift.StringResource(key: "Money Saved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Money Saved & CO2e avoide
      ///
      /// Locales: en, ar, tr
      static let moneySavedCO2eAvoide = Rswift.StringResource(key: "Money Saved & CO2e avoide", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: My Cart
      ///
      /// Locales: en, ar, tr
      static let myCart = Rswift.StringResource(key: "My Cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: My Order
      ///
      /// Locales: en, ar, tr
      static let myOrder = Rswift.StringResource(key: "My Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: My Profile
      ///
      /// Locales: en, ar, tr
      static let myProfile = Rswift.StringResource(key: "My Profile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Mystery Mix
      ///
      /// Locales: en, ar, tr
      static let mysteryMix = Rswift.StringResource(key: "Mystery Mix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Mystery Mix left
      ///
      /// Locales: en, ar, tr
      static let mysteryMixLeft = Rswift.StringResource(key: "Mystery Mix left", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Name On Card
      ///
      /// Locales: en, ar, tr
      static let nameOnCard = Rswift.StringResource(key: "Name On Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: New Password
      ///
      /// Locales: en, ar, tr
      static let newPassword = Rswift.StringResource(key: "New Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: New password has been sent to your email
      ///
      /// Locales: en, ar, tr
      static let newPasswordHasBeenSentToYourEmail = Rswift.StringResource(key: "New password has been sent to your email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, ar, tr
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: No Data Available
      ///
      /// Locales: en, ar, tr
      static let noDataAvailable = Rswift.StringResource(key: "No Data Available", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: No internet connection make sure your device is connected to the internet
      ///
      /// Locales: en, ar, tr
      static let noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet = Rswift.StringResource(key: "No internet connection make sure your device is connected to the internet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Nothing in your cart
      ///
      /// Locales: en, ar, tr
      static let nothingInYourCart = Rswift.StringResource(key: "Nothing in your cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Notifications
      ///
      /// Locales: en, ar, tr
      static let notifications = Rswift.StringResource(key: "Notifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: ORDERED ON
      ///
      /// Locales: en, ar, tr
      static let orderedoN = Rswift.StringResource(key: "ORDERED ON", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: OTP Code Verification
      ///
      /// Locales: en, ar, tr
      static let otpCodeVerification = Rswift.StringResource(key: "OTP Code Verification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en, ar, tr
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Open
      ///
      /// Locales: en, ar, tr
      static let `open` = Rswift.StringResource(key: "Open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Order
      ///
      /// Locales: en, ar, tr
      static let order = Rswift.StringResource(key: "Order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Order Id
      ///
      /// Locales: en, ar, tr
      static let orderId = Rswift.StringResource(key: "Order Id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Order placed successfully
      ///
      /// Locales: en, ar, tr
      static let orderPlacedSuccessfully = Rswift.StringResource(key: "Order placed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Ordered placed successfully
      ///
      /// Locales: en, ar, tr
      static let orderedPlacedSuccessfully = Rswift.StringResource(key: "Ordered placed successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, ar, tr
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Payment 
      ///
      /// Locales: en, ar, tr
      static let payment = Rswift.StringResource(key: "Payment ", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Phone Number
      ///
      /// Locales: en, ar, tr
      static let phoneNumber = Rswift.StringResource(key: "Phone Number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Pickup Time
      ///
      /// Locales: en, ar, tr
      static let pickupTime = Rswift.StringResource(key: "Pickup Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Pickup the order
      ///
      /// Locales: en, ar, tr
      static let pickupTheOrder = Rswift.StringResource(key: "Pickup the order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please check the Terms And Condition
      ///
      /// Locales: en, ar, tr
      static let pleaseCheckTheTermsAndCondition = Rswift.StringResource(key: "Please check the Terms And Condition", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter otp
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterOtp = Rswift.StringResource(key: "Please enter otp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the confirm password
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheConfirmPassword = Rswift.StringResource(key: "Please enter the confirm password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the email
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheEmail = Rswift.StringResource(key: "Please enter the email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the feedback
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheFeedback = Rswift.StringResource(key: "Please enter the feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the first name
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheFirstName = Rswift.StringResource(key: "Please enter the first name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the last name
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheLastName = Rswift.StringResource(key: "Please enter the last name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the mobile number
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheMobileNumber = Rswift.StringResource(key: "Please enter the mobile number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the password
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterThePassword = Rswift.StringResource(key: "Please enter the password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the required details!!
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheRequiredDetails = Rswift.StringResource(key: "Please enter the required details!!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the same password
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheSamePassword = Rswift.StringResource(key: "Please enter the same password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please enter the valid email
      ///
      /// Locales: en, ar, tr
      static let pleaseEnterTheValidEmail = Rswift.StringResource(key: "Please enter the valid email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please select ratings
      ///
      /// Locales: en, ar, tr
      static let pleaseSelectRatings = Rswift.StringResource(key: "Please select ratings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Please wait
      ///
      /// Locales: en, ar, tr
      static let pleaseWait = Rswift.StringResource(key: "Please wait", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Privacy policy
      ///
      /// Locales: en, ar, tr
      static let privacyPolicy = Rswift.StringResource(key: "Privacy policy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Proceed to checkout
      ///
      /// Locales: en, ar, tr
      static let proceedToCheckout = Rswift.StringResource(key: "Proceed to checkout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Product deleted successfully
      ///
      /// Locales: en, ar, tr
      static let productDeletedSuccessfully = Rswift.StringResource(key: "Product deleted successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Profile updated successfully
      ///
      /// Locales: en, ar, tr
      static let profileUpdatedSuccessfully = Rswift.StringResource(key: "Profile updated successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Promotion code applied!
      ///
      /// Locales: en, ar, tr
      static let promotionCodeApplied = Rswift.StringResource(key: "Promotion code applied!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: REGISTER
      ///
      /// Locales: en, ar, tr
      static let registeR = Rswift.StringResource(key: "REGISTER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Rating
      ///
      /// Locales: en, ar, tr
      static let rating = Rswift.StringResource(key: "Rating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Rating submitted successfully
      ///
      /// Locales: en, ar, tr
      static let ratingSubmittedSuccessfully = Rswift.StringResource(key: "Rating submitted successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Referal Code (Optional)
      ///
      /// Locales: en, ar, tr
      static let referalCodeOptional = Rswift.StringResource(key: "Referal Code (Optional)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, ar, tr
      static let register = Rswift.StringResource(key: "Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Resend
      ///
      /// Locales: en, ar, tr
      static let resend = Rswift.StringResource(key: "Resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Restaurants
      ///
      /// Locales: en, ar, tr
      static let restaurants = Rswift.StringResource(key: "Restaurants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Restuarants
      ///
      /// Locales: en, ar, tr
      static let restuarants = Rswift.StringResource(key: "Restuarants", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Review
      ///
      /// Locales: en, ar, tr
      static let review = Rswift.StringResource(key: "Review", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Review McDonalds
      ///
      /// Locales: en, ar, tr
      static let reviewMcDonalds = Rswift.StringResource(key: "Review McDonalds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Reviews
      ///
      /// Locales: en, ar, tr
      static let reviews = Rswift.StringResource(key: "Reviews", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Road name,Qatar
      ///
      /// Locales: en, ar, tr
      static let roadNameQatar = Rswift.StringResource(key: "Road name,Qatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: SUBMIT
      ///
      /// Locales: en, ar, tr
      static let submiT = Rswift.StringResource(key: "SUBMIT", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, ar, tr
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Save Card
      ///
      /// Locales: en, ar, tr
      static let saveCard = Rswift.StringResource(key: "Save Card", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, ar, tr
      static let search = Rswift.StringResource(key: "Search", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Search Location
      ///
      /// Locales: en, ar, tr
      static let searchLocation = Rswift.StringResource(key: "Search Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Search for meals
      ///
      /// Locales: en, ar, tr
      static let searchForMeals = Rswift.StringResource(key: "Search for meals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Security Code
      ///
      /// Locales: en, ar, tr
      static let securityCode = Rswift.StringResource(key: "Security Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: See All
      ///
      /// Locales: en, ar, tr
      static let seeAll = Rswift.StringResource(key: "See All", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Select Time
      ///
      /// Locales: en, ar, tr
      static let selectTime = Rswift.StringResource(key: "Select Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Select a distance 10 Km
      ///
      /// Locales: en, ar, tr
      static let selectADistance10Km = Rswift.StringResource(key: "Select a distance 10 Km", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Send
      ///
      /// Locales: en, ar, tr
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Shop Categories
      ///
      /// Locales: en, ar, tr
      static let shopCategories = Rswift.StringResource(key: "Shop Categories", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Signup Now
      ///
      /// Locales: en, ar, tr
      static let signupNow = Rswift.StringResource(key: "Signup Now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Something Went Wrong
      ///
      /// Locales: en, ar, tr
      static let somethingWentWrong = Rswift.StringResource(key: "Something Went Wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Sub Total
      ///
      /// Locales: en, ar, tr
      static let subTotal = Rswift.StringResource(key: "Sub Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Submit
      ///
      /// Locales: en, ar, tr
      static let submit = Rswift.StringResource(key: "Submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: SweetBite Bakery Menu
      ///
      /// Locales: en, ar, tr
      static let sweetBiteBakeryMenu = Rswift.StringResource(key: "SweetBite Bakery Menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Term of services
      ///
      /// Locales: en, ar, tr
      static let termOfServices = Rswift.StringResource(key: "Term of services", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Thanks for saving the food!
      ///
      /// Locales: en, ar, tr
      static let thanksForSavingTheFood = Rswift.StringResource(key: "Thanks for saving the food!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: The order has been created now its time to go and pick the food
      ///
      /// Locales: en, ar, tr
      static let theOrderHasBeenCreatedNowItsTimeToGoAndPickTheFood = Rswift.StringResource(key: "The order has been created now its time to go and pick the food", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: To Time
      ///
      /// Locales: en, ar, tr
      static let toTime = Rswift.StringResource(key: "To Time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Today 20:00 - 23:00
      ///
      /// Locales: en, ar, tr
      static let today20002300 = Rswift.StringResource(key: "Today 20:00 - 23:00", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Top Up to Wallet
      ///
      /// Locales: en, ar, tr
      static let topUpToWallet = Rswift.StringResource(key: "Top Up to Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Topup successfully done
      ///
      /// Locales: en, ar, tr
      static let topupSuccessfullyDone = Rswift.StringResource(key: "Topup successfully done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Total
      ///
      /// Locales: en, ar, tr
      static let total = Rswift.StringResource(key: "Total", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Total $40.00 for 0 ITEMS
      ///
      /// Locales: en, ar, tr
      static let total4000For0ITEMS = Rswift.StringResource(key: "Total $40.00 for 0 ITEMS", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Total to Pay
      ///
      /// Locales: en, ar, tr
      static let totalToPay = Rswift.StringResource(key: "Total to Pay", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Tranctions History
      ///
      /// Locales: en
      static let tranctionsHistory = Rswift.StringResource(key: "Tranctions History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Turkish
      ///
      /// Locales: en, ar, tr
      static let turkish = Rswift.StringResource(key: "Turkish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Type something
      ///
      /// Locales: en, ar, tr
      static let typeSomething = Rswift.StringResource(key: "Type something", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Update
      ///
      /// Locales: en, ar, tr
      static let update = Rswift.StringResource(key: "Update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Vegan
      ///
      /// Locales: en, ar, tr
      static let vegan = Rswift.StringResource(key: "Vegan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: View Detail
      ///
      /// Locales: en, ar, tr
      static let viewDetail = Rswift.StringResource(key: "View Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: View Menu
      ///
      /// Locales: en, ar, tr
      static let viewMenu = Rswift.StringResource(key: "View Menu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Wallet
      ///
      /// Locales: en, ar, tr
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: What you would get
      ///
      /// Locales: en, ar, tr
      static let whatYouWouldGet = Rswift.StringResource(key: "What you would get", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Write down your question and problem and we would be happy to help about it
      ///
      /// Locales: en, ar, tr
      static let writeDownYourQuestionAndProblemAndWeWouldBeHappyToHelpAboutIt = Rswift.StringResource(key: "Write down your question and problem and we would be happy to help about it", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Write to us
      ///
      /// Locales: en, ar, tr
      static let writeToUs = Rswift.StringResource(key: "Write to us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, ar, tr
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: You have no orders
      ///
      /// Locales: en, ar, tr
      static let youHaveNoOrders = Rswift.StringResource(key: "You have no orders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: You will get discount and copoun code an every new joiner you invite
      ///
      /// Locales: en, ar, tr
      static let youWillGetDiscountAndCopounCodeAnEveryNewJoinerYouInvite = Rswift.StringResource(key: "You will get discount and copoun code an every new joiner you invite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Your Balance
      ///
      /// Locales: en, ar, tr
      static let yourBalance = Rswift.StringResource(key: "Your Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Your Item successfully added to your cart
      ///
      /// Locales: en, ar, tr
      static let yourItemSuccessfullyAddedToYourCart = Rswift.StringResource(key: "Your Item successfully added to your cart", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Your password updated successfully
      ///
      /// Locales: en, ar, tr
      static let yourPasswordUpdatedSuccessfully = Rswift.StringResource(key: "Your password updated successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)
      /// en translation: Yuuuupi
      ///
      /// Locales: en, ar, tr
      static let yuuuupi = Rswift.StringResource(key: "Yuuuupi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ar", "tr"], comment: nil)

      /// en translation: 0 CAD
      ///
      /// Locales: en, ar, tr
      static func caD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("0 CAD", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "0 CAD"
        }

        return NSLocalizedString("0 CAD", bundle: bundle, comment: "")
      }

      /// en translation: 2972 Westheimer Rd. Santa Ana                                       2972 Westheimer Rd. Santa Ana
      ///
      /// Locales: en, ar, tr
      static func westheimerRdSantaAna2972WestheimerRdSantaAna(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2972 Westheimer Rd. Santa Ana                                       2972 Westheimer Rd. Santa Ana", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "2972 Westheimer Rd. Santa Ana                                       2972 Westheimer Rd. Santa Ana"
        }

        return NSLocalizedString("2972 Westheimer Rd. Santa Ana                                       2972 Westheimer Rd. Santa Ana", bundle: bundle, comment: "")
      }

      /// en translation: 2ddddeee
      ///
      /// Locales: en, ar, tr
      static func ddddeee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("2ddddeee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "2ddddeee"
        }

        return NSLocalizedString("2ddddeee", bundle: bundle, comment: "")
      }

      /// en translation: A code has been sent to +918982484814
      ///
      /// Locales: en, ar, tr
      static func aCodeHasBeenSentTo918982484814(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("A code has been sent to +918982484814", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "A code has been sent to +918982484814"
        }

        return NSLocalizedString("A code has been sent to +918982484814", bundle: bundle, comment: "")
      }

      /// en translation: About
      ///
      /// Locales: en, ar, tr
      static func about(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("About", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "About"
        }

        return NSLocalizedString("About", bundle: bundle, comment: "")
      }

      /// en translation: Add Extra item
      ///
      /// Locales: en, ar, tr
      static func addExtraItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Extra item", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Extra item"
        }

        return NSLocalizedString("Add Extra item", bundle: bundle, comment: "")
      }

      /// en translation: Add Promo Code
      ///
      /// Locales: en, ar, tr
      static func addPromoCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Promo Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Promo Code"
        }

        return NSLocalizedString("Add Promo Code", bundle: bundle, comment: "")
      }

      /// en translation: Add to cart
      ///
      /// Locales: en, ar, tr
      static func addToCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add to cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add to cart"
        }

        return NSLocalizedString("Add to cart", bundle: bundle, comment: "")
      }

      /// en translation: Address
      ///
      /// Locales: en, ar, tr
      static func address(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Address", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Address"
        }

        return NSLocalizedString("Address", bundle: bundle, comment: "")
      }

      /// en translation: All Time
      ///
      /// Locales: en, ar, tr
      static func allTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("All Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "All Time"
        }

        return NSLocalizedString("All Time", bundle: bundle, comment: "")
      }

      /// en translation: Already have an account ?
      ///
      /// Locales: en, ar, tr
      static func alreadyHaveAnAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already have an account ?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already have an account ?"
        }

        return NSLocalizedString("Already have an account ?", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, ar, tr
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Amount"
        }

        return NSLocalizedString("Amount", bundle: bundle, comment: "")
      }

      /// en translation: Apply
      ///
      /// Locales: en, ar, tr
      static func apply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Apply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Apply"
        }

        return NSLocalizedString("Apply", bundle: bundle, comment: "")
      }

      /// en translation: Arabic
      ///
      /// Locales: en, ar, tr
      static func arabic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arabic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Arabic"
        }

        return NSLocalizedString("Arabic", bundle: bundle, comment: "")
      }

      /// en translation: Arbaz sheikh
      ///
      /// Locales: en, ar, tr
      static func arbazSheikh(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arbaz sheikh", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Arbaz sheikh"
        }

        return NSLocalizedString("Arbaz sheikh", bundle: bundle, comment: "")
      }

      /// en translation: Back to Home
      ///
      /// Locales: en, ar, tr
      static func backToHome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Back to Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Back to Home"
        }

        return NSLocalizedString("Back to Home", bundle: bundle, comment: "")
      }

      /// en translation: Button
      ///
      /// Locales: en, ar, tr
      static func button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Button"
        }

        return NSLocalizedString("Button", bundle: bundle, comment: "")
      }

      /// en translation: C02e avoide
      ///
      /// Locales: en, ar, tr
      static func c02eAvoide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("C02e avoide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "C02e avoide"
        }

        return NSLocalizedString("C02e avoide", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ar, tr
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Card Number
      ///
      /// Locales: en, ar, tr
      static func cardNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card Number"
        }

        return NSLocalizedString("Card Number", bundle: bundle, comment: "")
      }

      /// en translation: Card is incomplete
      ///
      /// Locales: en, ar, tr
      static func cardIsIncomplete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card is incomplete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card is incomplete"
        }

        return NSLocalizedString("Card is incomplete", bundle: bundle, comment: "")
      }

      /// en translation: Card is invalid
      ///
      /// Locales: en, ar, tr
      static func cardIsInvalid(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Card is invalid", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Card is invalid"
        }

        return NSLocalizedString("Card is invalid", bundle: bundle, comment: "")
      }

      /// en translation: Change Password
      ///
      /// Locales: en, ar, tr
      static func changePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Password"
        }

        return NSLocalizedString("Change Password", bundle: bundle, comment: "")
      }

      /// en translation: Chicken skewers with slices sweet peppers
      ///
      /// Locales: en, ar, tr
      static func chickenSkewersWithSlicesSweetPeppers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Chicken skewers with slices sweet peppers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Chicken skewers with slices sweet peppers"
        }

        return NSLocalizedString("Chicken skewers with slices sweet peppers", bundle: bundle, comment: "")
      }

      /// en translation: Choose Your Language
      ///
      /// Locales: en, ar, tr
      static func chooseYourLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose Your Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose Your Language"
        }

        return NSLocalizedString("Choose Your Language", bundle: bundle, comment: "")
      }

      /// en translation: Choose this location
      ///
      /// Locales: en, ar, tr
      static func chooseThisLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose this location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose this location"
        }

        return NSLocalizedString("Choose this location", bundle: bundle, comment: "")
      }

      /// en translation: Completed
      ///
      /// Locales: en, ar, tr
      static func completed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Completed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Completed"
        }

        return NSLocalizedString("Completed", bundle: bundle, comment: "")
      }

      /// en translation: Confirm Password
      ///
      /// Locales: en, ar, tr
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm Password"
        }

        return NSLocalizedString("Confirm Password", bundle: bundle, comment: "")
      }

      /// en translation: Current Password
      ///
      /// Locales: en, ar, tr
      static func currentPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Current Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Current Password"
        }

        return NSLocalizedString("Current Password", bundle: bundle, comment: "")
      }

      /// en translation: DONE
      ///
      /// Locales: en, ar, tr
      static func donE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("DONE", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "DONE"
        }

        return NSLocalizedString("DONE", bundle: bundle, comment: "")
      }

      /// en translation: Daily Deal
      ///
      /// Locales: en, ar, tr
      static func dailyDeal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Daily Deal", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Daily Deal"
        }

        return NSLocalizedString("Daily Deal", bundle: bundle, comment: "")
      }

      /// en translation: Deit Type
      ///
      /// Locales: en, ar, tr
      static func deitType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Deit Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Deit Type"
        }

        return NSLocalizedString("Deit Type", bundle: bundle, comment: "")
      }

      /// en translation: Delivery Fee
      ///
      /// Locales: en, ar, tr
      static func deliveryFee(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delivery Fee", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delivery Fee"
        }

        return NSLocalizedString("Delivery Fee", bundle: bundle, comment: "")
      }

      /// en translation: Discount
      ///
      /// Locales: en, ar, tr
      static func discount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Discount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Discount"
        }

        return NSLocalizedString("Discount", bundle: bundle, comment: "")
      }

      /// en translation: Discount Food
      ///
      /// Locales: en, ar, tr
      static func discountFood(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Discount Food", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Discount Food"
        }

        return NSLocalizedString("Discount Food", bundle: bundle, comment: "")
      }

      /// en translation: Discounts
      ///
      /// Locales: en, ar, tr
      static func discounts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Discounts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Discounts"
        }

        return NSLocalizedString("Discounts", bundle: bundle, comment: "")
      }

      /// en translation: Dismiss
      ///
      /// Locales: en, ar, tr
      static func dismiss(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dismiss", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dismiss"
        }

        return NSLocalizedString("Dismiss", bundle: bundle, comment: "")
      }

      /// en translation: Don't Receive a Code?
      ///
      /// Locales: en, ar, tr
      static func donTReceiveACode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Don't Receive a Code?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Don't Receive a Code?"
        }

        return NSLocalizedString("Don't Receive a Code?", bundle: bundle, comment: "")
      }

      /// en translation: Don't have an account?
      ///
      /// Locales: en, ar, tr
      static func donTHaveAnAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Don't have an account?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Don't have an account?"
        }

        return NSLocalizedString("Don't have an account?", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, ar, tr
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, ar, tr
      static func english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("English", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "English"
        }

        return NSLocalizedString("English", bundle: bundle, comment: "")
      }

      /// en translation: Enter
      ///
      /// Locales: en, ar, tr
      static func enter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter"
        }

        return NSLocalizedString("Enter", bundle: bundle, comment: "")
      }

      /// en translation: Enter card number
      ///
      /// Locales: en, ar, tr
      static func enterCardNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter card number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter card number"
        }

        return NSLocalizedString("Enter card number", bundle: bundle, comment: "")
      }

      /// en translation: Enter expiry date
      ///
      /// Locales: en, ar, tr
      static func enterExpiryDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter expiry date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter expiry date"
        }

        return NSLocalizedString("Enter expiry date", bundle: bundle, comment: "")
      }

      /// en translation: Enter name on card
      ///
      /// Locales: en, ar, tr
      static func enterNameOnCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter name on card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter name on card"
        }

        return NSLocalizedString("Enter name on card", bundle: bundle, comment: "")
      }

      /// en translation: Enter security code
      ///
      /// Locales: en, ar, tr
      static func enterSecurityCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter security code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter security code"
        }

        return NSLocalizedString("Enter security code", bundle: bundle, comment: "")
      }

      /// en translation: Enter verification code
      ///
      /// Locales: en, ar, tr
      static func enterVerificationCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter verification code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter verification code"
        }

        return NSLocalizedString("Enter verification code", bundle: bundle, comment: "")
      }

      /// en translation: Enter your email address to reset your password
      ///
      /// Locales: en, ar, tr
      static func enterYourEmailAddressToResetYourPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter your email address to reset your password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter your email address to reset your password"
        }

        return NSLocalizedString("Enter your email address to reset your password", bundle: bundle, comment: "")
      }

      /// en translation: Expiry Date
      ///
      /// Locales: en, ar, tr
      static func expiryDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Expiry Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Expiry Date"
        }

        return NSLocalizedString("Expiry Date", bundle: bundle, comment: "")
      }

      /// en translation: FAQ
      ///
      /// Locales: en, ar, tr
      static func faQ(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FAQ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FAQ"
        }

        return NSLocalizedString("FAQ", bundle: bundle, comment: "")
      }

      /// en translation: Favourite
      ///
      /// Locales: en, ar, tr
      static func favourite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Favourite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Favourite"
        }

        return NSLocalizedString("Favourite", bundle: bundle, comment: "")
      }

      /// en translation: Fill me up. start ordering!
      ///
      /// Locales: en, ar, tr
      static func fillMeUpStartOrdering(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fill me up. start ordering!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fill me up. start ordering!"
        }

        return NSLocalizedString("Fill me up. start ordering!", bundle: bundle, comment: "")
      }

      /// en translation: Filter
      ///
      /// Locales: en, ar, tr
      static func filter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Filter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Filter"
        }

        return NSLocalizedString("Filter", bundle: bundle, comment: "")
      }

      /// en translation: Find Your Shop
      ///
      /// Locales: en, ar, tr
      static func findYourShop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Find Your Shop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Find Your Shop"
        }

        return NSLocalizedString("Find Your Shop", bundle: bundle, comment: "")
      }

      /// en translation: First Name
      ///
      /// Locales: en, ar, tr
      static func firstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("First Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "First Name"
        }

        return NSLocalizedString("First Name", bundle: bundle, comment: "")
      }

      /// en translation: Food Type
      ///
      /// Locales: en, ar, tr
      static func foodType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Food Type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Food Type"
        }

        return NSLocalizedString("Food Type", bundle: bundle, comment: "")
      }

      /// en translation: From Time
      ///
      /// Locales: en, ar, tr
      static func fromTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("From Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "From Time"
        }

        return NSLocalizedString("From Time", bundle: bundle, comment: "")
      }

      /// en translation: Give Rating
      ///
      /// Locales: en, ar, tr
      static func giveRating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Give Rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Give Rating"
        }

        return NSLocalizedString("Give Rating", bundle: bundle, comment: "")
      }

      /// en translation: Go To Cart
      ///
      /// Locales: en, ar, tr
      static func goToCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Go To Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Go To Cart"
        }

        return NSLocalizedString("Go To Cart", bundle: bundle, comment: "")
      }

      /// en translation: Help
      ///
      /// Locales: en, ar, tr
      static func help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Help"
        }

        return NSLocalizedString("Help", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en, ar, tr
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home"
        }

        return NSLocalizedString("Home", bundle: bundle, comment: "")
      }

      /// en translation: How can we help you?
      ///
      /// Locales: en, ar, tr
      static func howCanWeHelpYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How can we help you?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How can we help you?"
        }

        return NSLocalizedString("How can we help you?", bundle: bundle, comment: "")
      }

      /// en translation: I have read the Terms & Conditions and accept them
      ///
      /// Locales: en, ar, tr
      static func iHaveReadTheTermsConditionsAndAcceptThem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("I have read the Terms & Conditions and accept them", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "I have read the Terms & Conditions and accept them"
        }

        return NSLocalizedString("I have read the Terms & Conditions and accept them", bundle: bundle, comment: "")
      }

      /// en translation: ITEM
      ///
      /// Locales: en, ar, tr
      static func iteM(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ITEM", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ITEM"
        }

        return NSLocalizedString("ITEM", bundle: bundle, comment: "")
      }

      /// en translation: ITEMS
      ///
      /// Locales: en, ar, tr
      static func itemS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ITEMS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ITEMS"
        }

        return NSLocalizedString("ITEMS", bundle: bundle, comment: "")
      }

      /// en translation: ITEMS left
      ///
      /// Locales: en, ar, tr
      static func itemsLeft(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ITEMS left", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ITEMS left"
        }

        return NSLocalizedString("ITEMS left", bundle: bundle, comment: "")
      }

      /// en translation: In Progress
      ///
      /// Locales: en, ar, tr
      static func inProgress(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("In Progress", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "In Progress"
        }

        return NSLocalizedString("In Progress", bundle: bundle, comment: "")
      }

      /// en translation: Invalid Otp
      ///
      /// Locales: en, ar, tr
      static func invalidOtp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invalid Otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invalid Otp"
        }

        return NSLocalizedString("Invalid Otp", bundle: bundle, comment: "")
      }

      /// en translation: Invite your friends
      ///
      /// Locales: en, ar, tr
      static func inviteYourFriends(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Invite your friends", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Invite your friends"
        }

        return NSLocalizedString("Invite your friends", bundle: bundle, comment: "")
      }

      /// en translation: Item Added to Cart
      ///
      /// Locales: en, ar, tr
      static func itemAddedToCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Item Added to Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Item Added to Cart"
        }

        return NSLocalizedString("Item Added to Cart", bundle: bundle, comment: "")
      }

      /// en translation: Items
      ///
      /// Locales: en, ar, tr
      static func items(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Items", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Items"
        }

        return NSLocalizedString("Items", bundle: bundle, comment: "")
      }

      /// en translation: Label
      ///
      /// Locales: en, ar, tr
      static func label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Label"
        }

        return NSLocalizedString("Label", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, ar, tr
      static func language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language"
        }

        return NSLocalizedString("Language", bundle: bundle, comment: "")
      }

      /// en translation: Last Name
      ///
      /// Locales: en, ar, tr
      static func lastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Last Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Last Name"
        }

        return NSLocalizedString("Last Name", bundle: bundle, comment: "")
      }

      /// en translation: Listing
      ///
      /// Locales: en, ar, tr
      static func listing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Listing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Listing"
        }

        return NSLocalizedString("Listing", bundle: bundle, comment: "")
      }

      /// en translation: Loading
      ///
      /// Locales: en, ar, tr
      static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Loading"
        }

        return NSLocalizedString("Loading", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, ar, tr
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location"
        }

        return NSLocalizedString("Location", bundle: bundle, comment: "")
      }

      /// en translation: Location Not Found
      ///
      /// Locales: en, ar, tr
      static func locationNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location Not Found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location Not Found"
        }

        return NSLocalizedString("Location Not Found", bundle: bundle, comment: "")
      }

      /// en translation: Login
      ///
      /// Locales: en, ar, tr
      static func login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login"
        }

        return NSLocalizedString("Login", bundle: bundle, comment: "")
      }

      /// en translation: Login Now
      ///
      /// Locales: en, ar, tr
      static func loginNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login Now"
        }

        return NSLocalizedString("Login Now", bundle: bundle, comment: "")
      }

      /// en translation: Login with Google Account
      ///
      /// Locales: en, ar, tr
      static func loginWithGoogleAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login with Google Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login with Google Account"
        }

        return NSLocalizedString("Login with Google Account", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en, ar, tr
      static func logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Logout"
        }

        return NSLocalizedString("Logout", bundle: bundle, comment: "")
      }

      /// en translation: Map
      ///
      /// Locales: en, ar, tr
      static func map(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Map", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Map"
        }

        return NSLocalizedString("Map", bundle: bundle, comment: "")
      }

      /// en translation: McDonald's
      ///
      /// Locales: en, ar, tr
      static func mcDonaldS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("McDonald's", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "McDonald's"
        }

        return NSLocalizedString("McDonald's", bundle: bundle, comment: "")
      }

      /// en translation: Mobile
      ///
      /// Locales: en, ar, tr
      static func mobile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mobile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mobile"
        }

        return NSLocalizedString("Mobile", bundle: bundle, comment: "")
      }

      /// en translation: Money Saved
      ///
      /// Locales: en, ar, tr
      static func moneySaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Money Saved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Money Saved"
        }

        return NSLocalizedString("Money Saved", bundle: bundle, comment: "")
      }

      /// en translation: Money Saved & CO2e avoide
      ///
      /// Locales: en, ar, tr
      static func moneySavedCO2eAvoide(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Money Saved & CO2e avoide", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Money Saved & CO2e avoide"
        }

        return NSLocalizedString("Money Saved & CO2e avoide", bundle: bundle, comment: "")
      }

      /// en translation: My Cart
      ///
      /// Locales: en, ar, tr
      static func myCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Cart"
        }

        return NSLocalizedString("My Cart", bundle: bundle, comment: "")
      }

      /// en translation: My Order
      ///
      /// Locales: en, ar, tr
      static func myOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Order"
        }

        return NSLocalizedString("My Order", bundle: bundle, comment: "")
      }

      /// en translation: My Profile
      ///
      /// Locales: en, ar, tr
      static func myProfile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("My Profile", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "My Profile"
        }

        return NSLocalizedString("My Profile", bundle: bundle, comment: "")
      }

      /// en translation: Mystery Mix
      ///
      /// Locales: en, ar, tr
      static func mysteryMix(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mystery Mix", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mystery Mix"
        }

        return NSLocalizedString("Mystery Mix", bundle: bundle, comment: "")
      }

      /// en translation: Mystery Mix left
      ///
      /// Locales: en, ar, tr
      static func mysteryMixLeft(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mystery Mix left", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mystery Mix left"
        }

        return NSLocalizedString("Mystery Mix left", bundle: bundle, comment: "")
      }

      /// en translation: Name On Card
      ///
      /// Locales: en, ar, tr
      static func nameOnCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name On Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name On Card"
        }

        return NSLocalizedString("Name On Card", bundle: bundle, comment: "")
      }

      /// en translation: New Password
      ///
      /// Locales: en, ar, tr
      static func newPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Password"
        }

        return NSLocalizedString("New Password", bundle: bundle, comment: "")
      }

      /// en translation: New password has been sent to your email
      ///
      /// Locales: en, ar, tr
      static func newPasswordHasBeenSentToYourEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New password has been sent to your email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New password has been sent to your email"
        }

        return NSLocalizedString("New password has been sent to your email", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, ar, tr
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No"
        }

        return NSLocalizedString("No", bundle: bundle, comment: "")
      }

      /// en translation: No Data Available
      ///
      /// Locales: en, ar, tr
      static func noDataAvailable(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Data Available", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Data Available"
        }

        return NSLocalizedString("No Data Available", bundle: bundle, comment: "")
      }

      /// en translation: No internet connection make sure your device is connected to the internet
      ///
      /// Locales: en, ar, tr
      static func noInternetConnectionMakeSureYourDeviceIsConnectedToTheInternet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No internet connection make sure your device is connected to the internet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No internet connection make sure your device is connected to the internet"
        }

        return NSLocalizedString("No internet connection make sure your device is connected to the internet", bundle: bundle, comment: "")
      }

      /// en translation: Nothing in your cart
      ///
      /// Locales: en, ar, tr
      static func nothingInYourCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Nothing in your cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Nothing in your cart"
        }

        return NSLocalizedString("Nothing in your cart", bundle: bundle, comment: "")
      }

      /// en translation: Notifications
      ///
      /// Locales: en, ar, tr
      static func notifications(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications"
        }

        return NSLocalizedString("Notifications", bundle: bundle, comment: "")
      }

      /// en translation: ORDERED ON
      ///
      /// Locales: en, ar, tr
      static func orderedoN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ORDERED ON", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ORDERED ON"
        }

        return NSLocalizedString("ORDERED ON", bundle: bundle, comment: "")
      }

      /// en translation: OTP Code Verification
      ///
      /// Locales: en, ar, tr
      static func otpCodeVerification(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OTP Code Verification", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OTP Code Verification"
        }

        return NSLocalizedString("OTP Code Verification", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en, ar, tr
      static func ok(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ok"
        }

        return NSLocalizedString("Ok", bundle: bundle, comment: "")
      }

      /// en translation: Open
      ///
      /// Locales: en, ar, tr
      static func `open`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open"
        }

        return NSLocalizedString("Open", bundle: bundle, comment: "")
      }

      /// en translation: Order
      ///
      /// Locales: en, ar, tr
      static func order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order"
        }

        return NSLocalizedString("Order", bundle: bundle, comment: "")
      }

      /// en translation: Order Id
      ///
      /// Locales: en, ar, tr
      static func orderId(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order Id", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order Id"
        }

        return NSLocalizedString("Order Id", bundle: bundle, comment: "")
      }

      /// en translation: Order placed successfully
      ///
      /// Locales: en, ar, tr
      static func orderPlacedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Order placed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Order placed successfully"
        }

        return NSLocalizedString("Order placed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Ordered placed successfully
      ///
      /// Locales: en, ar, tr
      static func orderedPlacedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Ordered placed successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Ordered placed successfully"
        }

        return NSLocalizedString("Ordered placed successfully", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, ar, tr
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// en translation: Payment 
      ///
      /// Locales: en, ar, tr
      static func payment(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Payment ", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Payment "
        }

        return NSLocalizedString("Payment ", bundle: bundle, comment: "")
      }

      /// en translation: Phone Number
      ///
      /// Locales: en, ar, tr
      static func phoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Phone Number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Phone Number"
        }

        return NSLocalizedString("Phone Number", bundle: bundle, comment: "")
      }

      /// en translation: Pickup Time
      ///
      /// Locales: en, ar, tr
      static func pickupTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pickup Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pickup Time"
        }

        return NSLocalizedString("Pickup Time", bundle: bundle, comment: "")
      }

      /// en translation: Pickup the order
      ///
      /// Locales: en, ar, tr
      static func pickupTheOrder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Pickup the order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Pickup the order"
        }

        return NSLocalizedString("Pickup the order", bundle: bundle, comment: "")
      }

      /// en translation: Please check the Terms And Condition
      ///
      /// Locales: en, ar, tr
      static func pleaseCheckTheTermsAndCondition(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please check the Terms And Condition", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please check the Terms And Condition"
        }

        return NSLocalizedString("Please check the Terms And Condition", bundle: bundle, comment: "")
      }

      /// en translation: Please enter otp
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterOtp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter otp"
        }

        return NSLocalizedString("Please enter otp", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the confirm password
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the confirm password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the confirm password"
        }

        return NSLocalizedString("Please enter the confirm password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the email
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the email"
        }

        return NSLocalizedString("Please enter the email", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the feedback
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the feedback"
        }

        return NSLocalizedString("Please enter the feedback", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the first name
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the first name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the first name"
        }

        return NSLocalizedString("Please enter the first name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the last name
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the last name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the last name"
        }

        return NSLocalizedString("Please enter the last name", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the mobile number
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheMobileNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the mobile number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the mobile number"
        }

        return NSLocalizedString("Please enter the mobile number", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the password
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterThePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the password"
        }

        return NSLocalizedString("Please enter the password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the required details!!
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheRequiredDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the required details!!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the required details!!"
        }

        return NSLocalizedString("Please enter the required details!!", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the same password
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheSamePassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the same password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the same password"
        }

        return NSLocalizedString("Please enter the same password", bundle: bundle, comment: "")
      }

      /// en translation: Please enter the valid email
      ///
      /// Locales: en, ar, tr
      static func pleaseEnterTheValidEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter the valid email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter the valid email"
        }

        return NSLocalizedString("Please enter the valid email", bundle: bundle, comment: "")
      }

      /// en translation: Please select ratings
      ///
      /// Locales: en, ar, tr
      static func pleaseSelectRatings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please select ratings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please select ratings"
        }

        return NSLocalizedString("Please select ratings", bundle: bundle, comment: "")
      }

      /// en translation: Please wait
      ///
      /// Locales: en, ar, tr
      static func pleaseWait(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please wait", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please wait"
        }

        return NSLocalizedString("Please wait", bundle: bundle, comment: "")
      }

      /// en translation: Privacy policy
      ///
      /// Locales: en, ar, tr
      static func privacyPolicy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Privacy policy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Privacy policy"
        }

        return NSLocalizedString("Privacy policy", bundle: bundle, comment: "")
      }

      /// en translation: Proceed to checkout
      ///
      /// Locales: en, ar, tr
      static func proceedToCheckout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Proceed to checkout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Proceed to checkout"
        }

        return NSLocalizedString("Proceed to checkout", bundle: bundle, comment: "")
      }

      /// en translation: Product deleted successfully
      ///
      /// Locales: en, ar, tr
      static func productDeletedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Product deleted successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Product deleted successfully"
        }

        return NSLocalizedString("Product deleted successfully", bundle: bundle, comment: "")
      }

      /// en translation: Profile updated successfully
      ///
      /// Locales: en, ar, tr
      static func profileUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Profile updated successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Profile updated successfully"
        }

        return NSLocalizedString("Profile updated successfully", bundle: bundle, comment: "")
      }

      /// en translation: Promotion code applied!
      ///
      /// Locales: en, ar, tr
      static func promotionCodeApplied(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Promotion code applied!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Promotion code applied!"
        }

        return NSLocalizedString("Promotion code applied!", bundle: bundle, comment: "")
      }

      /// en translation: REGISTER
      ///
      /// Locales: en, ar, tr
      static func registeR(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("REGISTER", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "REGISTER"
        }

        return NSLocalizedString("REGISTER", bundle: bundle, comment: "")
      }

      /// en translation: Rating
      ///
      /// Locales: en, ar, tr
      static func rating(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rating", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rating"
        }

        return NSLocalizedString("Rating", bundle: bundle, comment: "")
      }

      /// en translation: Rating submitted successfully
      ///
      /// Locales: en, ar, tr
      static func ratingSubmittedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rating submitted successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rating submitted successfully"
        }

        return NSLocalizedString("Rating submitted successfully", bundle: bundle, comment: "")
      }

      /// en translation: Referal Code (Optional)
      ///
      /// Locales: en, ar, tr
      static func referalCodeOptional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Referal Code (Optional)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Referal Code (Optional)"
        }

        return NSLocalizedString("Referal Code (Optional)", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, ar, tr
      static func register(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Register", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Register"
        }

        return NSLocalizedString("Register", bundle: bundle, comment: "")
      }

      /// en translation: Resend
      ///
      /// Locales: en, ar, tr
      static func resend(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Resend", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Resend"
        }

        return NSLocalizedString("Resend", bundle: bundle, comment: "")
      }

      /// en translation: Restaurants
      ///
      /// Locales: en, ar, tr
      static func restaurants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Restaurants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Restaurants"
        }

        return NSLocalizedString("Restaurants", bundle: bundle, comment: "")
      }

      /// en translation: Restuarants
      ///
      /// Locales: en, ar, tr
      static func restuarants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Restuarants", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Restuarants"
        }

        return NSLocalizedString("Restuarants", bundle: bundle, comment: "")
      }

      /// en translation: Review
      ///
      /// Locales: en, ar, tr
      static func review(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Review", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Review"
        }

        return NSLocalizedString("Review", bundle: bundle, comment: "")
      }

      /// en translation: Review McDonalds
      ///
      /// Locales: en, ar, tr
      static func reviewMcDonalds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Review McDonalds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Review McDonalds"
        }

        return NSLocalizedString("Review McDonalds", bundle: bundle, comment: "")
      }

      /// en translation: Reviews
      ///
      /// Locales: en, ar, tr
      static func reviews(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Reviews", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Reviews"
        }

        return NSLocalizedString("Reviews", bundle: bundle, comment: "")
      }

      /// en translation: Road name,Qatar
      ///
      /// Locales: en, ar, tr
      static func roadNameQatar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Road name,Qatar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Road name,Qatar"
        }

        return NSLocalizedString("Road name,Qatar", bundle: bundle, comment: "")
      }

      /// en translation: SUBMIT
      ///
      /// Locales: en, ar, tr
      static func submiT(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SUBMIT", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SUBMIT"
        }

        return NSLocalizedString("SUBMIT", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, ar, tr
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// en translation: Save Card
      ///
      /// Locales: en, ar, tr
      static func saveCard(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save Card", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save Card"
        }

        return NSLocalizedString("Save Card", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, ar, tr
      static func search(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search"
        }

        return NSLocalizedString("Search", bundle: bundle, comment: "")
      }

      /// en translation: Search Location
      ///
      /// Locales: en, ar, tr
      static func searchLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search Location"
        }

        return NSLocalizedString("Search Location", bundle: bundle, comment: "")
      }

      /// en translation: Search for meals
      ///
      /// Locales: en, ar, tr
      static func searchForMeals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search for meals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search for meals"
        }

        return NSLocalizedString("Search for meals", bundle: bundle, comment: "")
      }

      /// en translation: Security Code
      ///
      /// Locales: en, ar, tr
      static func securityCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Security Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Security Code"
        }

        return NSLocalizedString("Security Code", bundle: bundle, comment: "")
      }

      /// en translation: See All
      ///
      /// Locales: en, ar, tr
      static func seeAll(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("See All", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "See All"
        }

        return NSLocalizedString("See All", bundle: bundle, comment: "")
      }

      /// en translation: Select Time
      ///
      /// Locales: en, ar, tr
      static func selectTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select Time"
        }

        return NSLocalizedString("Select Time", bundle: bundle, comment: "")
      }

      /// en translation: Select a distance 10 Km
      ///
      /// Locales: en, ar, tr
      static func selectADistance10Km(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select a distance 10 Km", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select a distance 10 Km"
        }

        return NSLocalizedString("Select a distance 10 Km", bundle: bundle, comment: "")
      }

      /// en translation: Send
      ///
      /// Locales: en, ar, tr
      static func send(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Send", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Send"
        }

        return NSLocalizedString("Send", bundle: bundle, comment: "")
      }

      /// en translation: Shop Categories
      ///
      /// Locales: en, ar, tr
      static func shopCategories(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Shop Categories", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Shop Categories"
        }

        return NSLocalizedString("Shop Categories", bundle: bundle, comment: "")
      }

      /// en translation: Signup Now
      ///
      /// Locales: en, ar, tr
      static func signupNow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Signup Now", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Signup Now"
        }

        return NSLocalizedString("Signup Now", bundle: bundle, comment: "")
      }

      /// en translation: Something Went Wrong
      ///
      /// Locales: en, ar, tr
      static func somethingWentWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something Went Wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something Went Wrong"
        }

        return NSLocalizedString("Something Went Wrong", bundle: bundle, comment: "")
      }

      /// en translation: Sub Total
      ///
      /// Locales: en, ar, tr
      static func subTotal(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sub Total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sub Total"
        }

        return NSLocalizedString("Sub Total", bundle: bundle, comment: "")
      }

      /// en translation: Submit
      ///
      /// Locales: en, ar, tr
      static func submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Submit"
        }

        return NSLocalizedString("Submit", bundle: bundle, comment: "")
      }

      /// en translation: SweetBite Bakery Menu
      ///
      /// Locales: en, ar, tr
      static func sweetBiteBakeryMenu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SweetBite Bakery Menu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SweetBite Bakery Menu"
        }

        return NSLocalizedString("SweetBite Bakery Menu", bundle: bundle, comment: "")
      }

      /// en translation: Term of services
      ///
      /// Locales: en, ar, tr
      static func termOfServices(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Term of services", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Term of services"
        }

        return NSLocalizedString("Term of services", bundle: bundle, comment: "")
      }

      /// en translation: Thanks for saving the food!
      ///
      /// Locales: en, ar, tr
      static func thanksForSavingTheFood(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thanks for saving the food!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thanks for saving the food!"
        }

        return NSLocalizedString("Thanks for saving the food!", bundle: bundle, comment: "")
      }

      /// en translation: The order has been created now its time to go and pick the food
      ///
      /// Locales: en, ar, tr
      static func theOrderHasBeenCreatedNowItsTimeToGoAndPickTheFood(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The order has been created now its time to go and pick the food", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The order has been created now its time to go and pick the food"
        }

        return NSLocalizedString("The order has been created now its time to go and pick the food", bundle: bundle, comment: "")
      }

      /// en translation: To Time
      ///
      /// Locales: en, ar, tr
      static func toTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("To Time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "To Time"
        }

        return NSLocalizedString("To Time", bundle: bundle, comment: "")
      }

      /// en translation: Today 20:00 - 23:00
      ///
      /// Locales: en, ar, tr
      static func today20002300(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Today 20:00 - 23:00", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Today 20:00 - 23:00"
        }

        return NSLocalizedString("Today 20:00 - 23:00", bundle: bundle, comment: "")
      }

      /// en translation: Top Up to Wallet
      ///
      /// Locales: en, ar, tr
      static func topUpToWallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Top Up to Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Top Up to Wallet"
        }

        return NSLocalizedString("Top Up to Wallet", bundle: bundle, comment: "")
      }

      /// en translation: Topup successfully done
      ///
      /// Locales: en, ar, tr
      static func topupSuccessfullyDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Topup successfully done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Topup successfully done"
        }

        return NSLocalizedString("Topup successfully done", bundle: bundle, comment: "")
      }

      /// en translation: Total
      ///
      /// Locales: en, ar, tr
      static func total(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total"
        }

        return NSLocalizedString("Total", bundle: bundle, comment: "")
      }

      /// en translation: Total $40.00 for 0 ITEMS
      ///
      /// Locales: en, ar, tr
      static func total4000For0ITEMS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total $40.00 for 0 ITEMS", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total $40.00 for 0 ITEMS"
        }

        return NSLocalizedString("Total $40.00 for 0 ITEMS", bundle: bundle, comment: "")
      }

      /// en translation: Total to Pay
      ///
      /// Locales: en, ar, tr
      static func totalToPay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Total to Pay", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Total to Pay"
        }

        return NSLocalizedString("Total to Pay", bundle: bundle, comment: "")
      }

      /// en translation: Tranctions History
      ///
      /// Locales: en
      static func tranctionsHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tranctions History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tranctions History"
        }

        return NSLocalizedString("Tranctions History", bundle: bundle, comment: "")
      }

      /// en translation: Turkish
      ///
      /// Locales: en, ar, tr
      static func turkish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Turkish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Turkish"
        }

        return NSLocalizedString("Turkish", bundle: bundle, comment: "")
      }

      /// en translation: Type something
      ///
      /// Locales: en, ar, tr
      static func typeSomething(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type something", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type something"
        }

        return NSLocalizedString("Type something", bundle: bundle, comment: "")
      }

      /// en translation: Update
      ///
      /// Locales: en, ar, tr
      static func update(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Update"
        }

        return NSLocalizedString("Update", bundle: bundle, comment: "")
      }

      /// en translation: Vegan
      ///
      /// Locales: en, ar, tr
      static func vegan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vegan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Vegan"
        }

        return NSLocalizedString("Vegan", bundle: bundle, comment: "")
      }

      /// en translation: View Detail
      ///
      /// Locales: en, ar, tr
      static func viewDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View Detail"
        }

        return NSLocalizedString("View Detail", bundle: bundle, comment: "")
      }

      /// en translation: View Menu
      ///
      /// Locales: en, ar, tr
      static func viewMenu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View Menu", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View Menu"
        }

        return NSLocalizedString("View Menu", bundle: bundle, comment: "")
      }

      /// en translation: Wallet
      ///
      /// Locales: en, ar, tr
      static func wallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wallet"
        }

        return NSLocalizedString("Wallet", bundle: bundle, comment: "")
      }

      /// en translation: What you would get
      ///
      /// Locales: en, ar, tr
      static func whatYouWouldGet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("What you would get", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "What you would get"
        }

        return NSLocalizedString("What you would get", bundle: bundle, comment: "")
      }

      /// en translation: Write down your question and problem and we would be happy to help about it
      ///
      /// Locales: en, ar, tr
      static func writeDownYourQuestionAndProblemAndWeWouldBeHappyToHelpAboutIt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write down your question and problem and we would be happy to help about it", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write down your question and problem and we would be happy to help about it"
        }

        return NSLocalizedString("Write down your question and problem and we would be happy to help about it", bundle: bundle, comment: "")
      }

      /// en translation: Write to us
      ///
      /// Locales: en, ar, tr
      static func writeToUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write to us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write to us"
        }

        return NSLocalizedString("Write to us", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, ar, tr
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yes"
        }

        return NSLocalizedString("Yes", bundle: bundle, comment: "")
      }

      /// en translation: You have no orders
      ///
      /// Locales: en, ar, tr
      static func youHaveNoOrders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You have no orders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You have no orders"
        }

        return NSLocalizedString("You have no orders", bundle: bundle, comment: "")
      }

      /// en translation: You will get discount and copoun code an every new joiner you invite
      ///
      /// Locales: en, ar, tr
      static func youWillGetDiscountAndCopounCodeAnEveryNewJoinerYouInvite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You will get discount and copoun code an every new joiner you invite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You will get discount and copoun code an every new joiner you invite"
        }

        return NSLocalizedString("You will get discount and copoun code an every new joiner you invite", bundle: bundle, comment: "")
      }

      /// en translation: Your Balance
      ///
      /// Locales: en, ar, tr
      static func yourBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Balance"
        }

        return NSLocalizedString("Your Balance", bundle: bundle, comment: "")
      }

      /// en translation: Your Item successfully added to your cart
      ///
      /// Locales: en, ar, tr
      static func yourItemSuccessfullyAddedToYourCart(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your Item successfully added to your cart", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your Item successfully added to your cart"
        }

        return NSLocalizedString("Your Item successfully added to your cart", bundle: bundle, comment: "")
      }

      /// en translation: Your password updated successfully
      ///
      /// Locales: en, ar, tr
      static func yourPasswordUpdatedSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your password updated successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your password updated successfully"
        }

        return NSLocalizedString("Your password updated successfully", bundle: bundle, comment: "")
      }

      /// en translation: Yuuuupi
      ///
      /// Locales: en, ar, tr
      static func yuuuupi(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yuuuupi", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yuuuupi"
        }

        return NSLocalizedString("Yuuuupi", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddedCartCell.validate()
      try _AllResCell.validate()
      try _AllReviewCell.validate()
      try _BagAndFoodCell.validate()
      try _ExtraItemCell.validate()
      try _FavCell.validate()
      try _FoodOrderCell.validate()
      try _ImgCell.validate()
      try _NotifyCell.validate()
      try _OrderCell.validate()
      try _OrderDetailCell.validate()
      try _PlacedOrderCell.validate()
      try _QuestionCell.validate()
      try _RestaurantCell.validate()
      try _ShopCategoryCell.validate()
      try _ToggleCell.validate()
      try _WalletTransactionCell.validate()
    }

    struct _AddedCartCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AddedCartCell

      let bundle = R.hostingBundle
      let identifier = "AddedCartCell"
      let name = "AddedCartCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddedCartCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddedCartCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Delete' is used in nib 'AddedCartCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 18200", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 18200' is used in nib 'AddedCartCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 18201", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 18201' is used in nib 'AddedCartCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chicken-skewers-with-slices-sweet-peppers-dill 4' is used in nib 'AddedCartCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AllResCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AllResCell

      let bundle = R.hostingBundle
      let identifier = "AllResCell"
      let name = "AllResCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllResCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllResCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "LocationNew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationNew' is used in nib 'AllResCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chicken-skewers-with-slices-sweet-peppers-dill 4' is used in nib 'AllResCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mdi_heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mdi_heart' is used in nib 'AllResCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in nib 'AllResCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _AllReviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = AllReviewCell

      let bundle = R.hostingBundle
      let identifier = "AllReviewCell"
      let name = "AllReviewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllReviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllReviewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in nib 'AllReviewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AnswerCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AnswerCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AnswerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AnswerCell
      }

      fileprivate init() {}
    }

    struct _BagAndFoodCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BagAndFoodCell

      let bundle = R.hostingBundle
      let identifier = "BagAndFoodCell"
      let name = "BagAndFoodCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BagAndFoodCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BagAndFoodCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Clock' is used in nib 'BagAndFoodCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in nib 'BagAndFoodCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _BakeryMenuCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BakeryMenuCell

      let bundle = R.hostingBundle
      let identifier = "BakeryMenuCell"
      let name = "BakeryMenuCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BakeryMenuCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BakeryMenuCell
      }

      fileprivate init() {}
    }

    struct _ExtraItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ExtraItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExtraItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExtraItemCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "RectangleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleUncheck' is used in nib 'ExtraItemCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FavCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FavCell

      let bundle = R.hostingBundle
      let identifier = "FavCell"
      let name = "FavCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FavCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FavCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Clock' is used in nib 'FavCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mdi_heart-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mdi_heart-outline' is used in nib 'FavCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in nib 'FavCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FoodOrderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = FoodOrderCell

      let bundle = R.hostingBundle
      let identifier = "FoodOrderCell"
      let name = "FoodOrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodOrderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Clock' is used in nib 'FoodOrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chicken-skewers-with-slices-sweet-peppers-dill 3' is used in nib 'FoodOrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'location' is used in nib 'FoodOrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "rating", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rating' is used in nib 'FoodOrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _FoodTypeCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FoodTypeCell

      let bundle = R.hostingBundle
      let identifier = "FoodTypeCell"
      let name = "FoodTypeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FoodTypeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FoodTypeCell
      }

      fileprivate init() {}
    }

    struct _ImgCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ImgCell

      let bundle = R.hostingBundle
      let identifier = "ImgCell"
      let name = "ImgCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImgCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImgCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chicken-skewers-with-slices-sweet-peppers-dill 3' is used in nib 'ImgCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ItemsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemsCell

      let bundle = R.hostingBundle
      let identifier = "ItemsCell"
      let name = "ItemsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ItemsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemsCell
      }

      fileprivate init() {}
    }

    struct _NotifyCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NotifyCell

      let bundle = R.hostingBundle
      let identifier = "NotifyCell"
      let name = "NotifyCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotifyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotifyCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 574", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 574' is used in nib 'NotifyCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _OrderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderCell

      let bundle = R.hostingBundle
      let identifier = "OrderCell"
      let name = "OrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Ellipse 73", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 73' is used in nib 'OrderCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gridicons_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridicons_location' is used in nib 'OrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in nib 'OrderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _OrderDetailCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OrderDetailCell

      let bundle = R.hostingBundle
      let identifier = "OrderDetailCell"
      let name = "OrderDetailCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> OrderDetailCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDetailCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Rectangle 4951", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rectangle 4951' is used in nib 'OrderDetailCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PlacedOrderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PlacedOrderCell

      let bundle = R.hostingBundle
      let identifier = "PlacedOrderCell"
      let name = "PlacedOrderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PlacedOrderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PlacedOrderCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Group 18240", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 18240' is used in nib 'PlacedOrderCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in nib 'PlacedOrderCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _QuestionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuestionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> QuestionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QuestionCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.down' is used in nib 'QuestionCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _RestaurantCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RestaurantCell

      let bundle = R.hostingBundle
      let identifier = "RestaurantCell"
      let name = "RestaurantCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestaurantCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "LocationNew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationNew' is used in nib 'RestaurantCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chicken-skewers-with-slices-sweet-peppers-dill 3' is used in nib 'RestaurantCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mdi_heart-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mdi_heart-outline' is used in nib 'RestaurantCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in nib 'RestaurantCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ShopCategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ShopCategoryCell

      let bundle = R.hostingBundle
      let identifier = "ShopCategoryCell"
      let name = "ShopCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ShopCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopCategoryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "chicken-skewers-with-slices-sweet-peppers-dill 3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chicken-skewers-with-slices-sweet-peppers-dill 3' is used in nib 'ShopCategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ToggleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ToggleCell

      let bundle = R.hostingBundle
      let identifier = "ToggleCell"
      let name = "ToggleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ToggleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ToggleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "clarity_list-line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clarity_list-line' is used in nib 'ToggleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _WalletTransactionCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletTransactionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WalletTransactionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletTransactionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "TransWallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransWallet' is used in nib 'WalletTransactionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in nib 'WalletTransactionCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Go Green,GoFoodoo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Go Green,GoFoodoo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let addressPickerVC = StoryboardViewControllerResource<AddressPickerVC>(identifier: "AddressPickerVC")
      let allOrderVC = StoryboardViewControllerResource<AllOrderVC>(identifier: "AllOrderVC")
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let contactUsVC = StoryboardViewControllerResource<ContactUsVC>(identifier: "ContactUsVC")
      let faq_sVC = StoryboardViewControllerResource<FAQ_sVC>(identifier: "FAQ_sVC")
      let favouriteVC = StoryboardViewControllerResource<FavouriteVC>(identifier: "FavouriteVC")
      let filterVC = StoryboardViewControllerResource<FilterVC>(identifier: "FilterVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let languageVC = StoryboardViewControllerResource<LanguageVC>(identifier: "LanguageVC")
      let leftMenuVC = StoryboardViewControllerResource<LeftMenuVC>(identifier: "LeftMenuVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let moneySavedVC = StoryboardViewControllerResource<MoneySavedVC>(identifier: "MoneySavedVC")
      let myCartVC = StoryboardViewControllerResource<MyCartVC>(identifier: "MyCartVC")
      let name = "Main"
      let notifyVC = StoryboardViewControllerResource<NotifyVC>(identifier: "NotifyVC")
      let otpVC = StoryboardViewControllerResource<OtpVC>(identifier: "OtpVC")
      let paymentVC = StoryboardViewControllerResource<PaymentVC>(identifier: "PaymentVC")
      let presentPaymentPopVC = StoryboardViewControllerResource<PresentPaymentPopVC>(identifier: "PresentPaymentPopVC")
      let presentPopVC = StoryboardViewControllerResource<PresentPopVC>(identifier: "PresentPopVC")
      let presentTopUpVC = StoryboardViewControllerResource<PresentTopUpVC>(identifier: "PresentTopUpVC")
      let ratingProductVC = StoryboardViewControllerResource<RatingProductVC>(identifier: "RatingProductVC")
      let referFriendVC = StoryboardViewControllerResource<ReferFriendVC>(identifier: "ReferFriendVC")
      let resMenuVC = StoryboardViewControllerResource<ResMenuVC>(identifier: "ResMenuVC")
      let resSeeAllVC = StoryboardViewControllerResource<ResSeeAllVC>(identifier: "ResSeeAllVC")
      let signupVC = StoryboardViewControllerResource<SignupVC>(identifier: "SignupVC")
      let userHomeVC = StoryboardViewControllerResource<UserHomeVC>(identifier: "UserHomeVC")
      let userOrderDetailVC = StoryboardViewControllerResource<UserOrderDetailVC>(identifier: "UserOrderDetailVC")
      let userProfileVC = StoryboardViewControllerResource<UserProfileVC>(identifier: "UserProfileVC")
      let userTabBarVC = StoryboardViewControllerResource<UserTabBarVC>(identifier: "UserTabBarVC")
      let userWalletVC = StoryboardViewControllerResource<UserWalletVC>(identifier: "UserWalletVC")

      func addressPickerVC(_: Void = ()) -> AddressPickerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressPickerVC)
      }

      func allOrderVC(_: Void = ()) -> AllOrderVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: allOrderVC)
      }

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func contactUsVC(_: Void = ()) -> ContactUsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsVC)
      }

      func faq_sVC(_: Void = ()) -> FAQ_sVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: faq_sVC)
      }

      func favouriteVC(_: Void = ()) -> FavouriteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favouriteVC)
      }

      func filterVC(_: Void = ()) -> FilterVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func languageVC(_: Void = ()) -> LanguageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: languageVC)
      }

      func leftMenuVC(_: Void = ()) -> LeftMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: leftMenuVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func moneySavedVC(_: Void = ()) -> MoneySavedVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moneySavedVC)
      }

      func myCartVC(_: Void = ()) -> MyCartVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCartVC)
      }

      func notifyVC(_: Void = ()) -> NotifyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notifyVC)
      }

      func otpVC(_: Void = ()) -> OtpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpVC)
      }

      func paymentVC(_: Void = ()) -> PaymentVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentVC)
      }

      func presentPaymentPopVC(_: Void = ()) -> PresentPaymentPopVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentPaymentPopVC)
      }

      func presentPopVC(_: Void = ()) -> PresentPopVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentPopVC)
      }

      func presentTopUpVC(_: Void = ()) -> PresentTopUpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: presentTopUpVC)
      }

      func ratingProductVC(_: Void = ()) -> RatingProductVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ratingProductVC)
      }

      func referFriendVC(_: Void = ()) -> ReferFriendVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: referFriendVC)
      }

      func resMenuVC(_: Void = ()) -> ResMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resMenuVC)
      }

      func resSeeAllVC(_: Void = ()) -> ResSeeAllVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resSeeAllVC)
      }

      func signupVC(_: Void = ()) -> SignupVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupVC)
      }

      func userHomeVC(_: Void = ()) -> UserHomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userHomeVC)
      }

      func userOrderDetailVC(_: Void = ()) -> UserOrderDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userOrderDetailVC)
      }

      func userProfileVC(_: Void = ()) -> UserProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileVC)
      }

      func userTabBarVC(_: Void = ()) -> UserTabBarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userTabBarVC)
      }

      func userWalletVC(_: Void = ()) -> UserWalletVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userWalletVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "CircleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CircleUncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Ellipse 73", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Ellipse 73' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Frame (1)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Frame (1)' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "GOFOODOO-FF 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'GOFOODOO-FF 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group (3)", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group (3)' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 18200", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 18200' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 18201", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 18201' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 18214", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 18214' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 18221", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 18221' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 18233", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 18233' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 458", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 458' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 466", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 466' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 467", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 467' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 478", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 478' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 676-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 676-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 717", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 717' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 719", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 719' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Group 720", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Group 720' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Line 13", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Line 13' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LocationNew", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LocationNew' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Menu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Menu' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PromoApplied", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PromoApplied' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RectangleUncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RectangleUncheck' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Review Products", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Review Products' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SolarMoney", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SolarMoney' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TransWallet18", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TransWallet18' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bag-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bag-2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "cart") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'cart' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.down") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.down' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.right' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "clocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clocation' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "clock") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'clock' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "entypo-social_google", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'entypo-social_google' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "home-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'home-2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_Circle_Black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Circle_Black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus.app.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus.app.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "profile_ic", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ri_search-2-line", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ri_search-2-line' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "simple-line-icons_energy", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'simple-line-icons_energy' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user-add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user-add' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Main", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Main' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Secondary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Secondary' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Text_Field", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Text_Field' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Theme_Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Theme_Color' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().addressPickerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressPickerVC' could not be loaded from storyboard 'Main' as 'AddressPickerVC'.") }
        if _R.storyboard.main().allOrderVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'allOrderVC' could not be loaded from storyboard 'Main' as 'AllOrderVC'.") }
        if _R.storyboard.main().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Main' as 'ChangePasswordVC'.") }
        if _R.storyboard.main().contactUsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsVC' could not be loaded from storyboard 'Main' as 'ContactUsVC'.") }
        if _R.storyboard.main().faq_sVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'faq_sVC' could not be loaded from storyboard 'Main' as 'FAQ_sVC'.") }
        if _R.storyboard.main().favouriteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favouriteVC' could not be loaded from storyboard 'Main' as 'FavouriteVC'.") }
        if _R.storyboard.main().filterVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterVC' could not be loaded from storyboard 'Main' as 'FilterVC'.") }
        if _R.storyboard.main().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Main' as 'ForgotPasswordVC'.") }
        if _R.storyboard.main().languageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'languageVC' could not be loaded from storyboard 'Main' as 'LanguageVC'.") }
        if _R.storyboard.main().leftMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'leftMenuVC' could not be loaded from storyboard 'Main' as 'LeftMenuVC'.") }
        if _R.storyboard.main().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Main' as 'LoginVC'.") }
        if _R.storyboard.main().moneySavedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moneySavedVC' could not be loaded from storyboard 'Main' as 'MoneySavedVC'.") }
        if _R.storyboard.main().myCartVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCartVC' could not be loaded from storyboard 'Main' as 'MyCartVC'.") }
        if _R.storyboard.main().notifyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notifyVC' could not be loaded from storyboard 'Main' as 'NotifyVC'.") }
        if _R.storyboard.main().otpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpVC' could not be loaded from storyboard 'Main' as 'OtpVC'.") }
        if _R.storyboard.main().paymentVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentVC' could not be loaded from storyboard 'Main' as 'PaymentVC'.") }
        if _R.storyboard.main().presentPaymentPopVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentPaymentPopVC' could not be loaded from storyboard 'Main' as 'PresentPaymentPopVC'.") }
        if _R.storyboard.main().presentPopVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentPopVC' could not be loaded from storyboard 'Main' as 'PresentPopVC'.") }
        if _R.storyboard.main().presentTopUpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'presentTopUpVC' could not be loaded from storyboard 'Main' as 'PresentTopUpVC'.") }
        if _R.storyboard.main().ratingProductVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ratingProductVC' could not be loaded from storyboard 'Main' as 'RatingProductVC'.") }
        if _R.storyboard.main().referFriendVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'referFriendVC' could not be loaded from storyboard 'Main' as 'ReferFriendVC'.") }
        if _R.storyboard.main().resMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resMenuVC' could not be loaded from storyboard 'Main' as 'ResMenuVC'.") }
        if _R.storyboard.main().resSeeAllVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resSeeAllVC' could not be loaded from storyboard 'Main' as 'ResSeeAllVC'.") }
        if _R.storyboard.main().signupVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupVC' could not be loaded from storyboard 'Main' as 'SignupVC'.") }
        if _R.storyboard.main().userHomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userHomeVC' could not be loaded from storyboard 'Main' as 'UserHomeVC'.") }
        if _R.storyboard.main().userOrderDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userOrderDetailVC' could not be loaded from storyboard 'Main' as 'UserOrderDetailVC'.") }
        if _R.storyboard.main().userProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileVC' could not be loaded from storyboard 'Main' as 'UserProfileVC'.") }
        if _R.storyboard.main().userTabBarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userTabBarVC' could not be loaded from storyboard 'Main' as 'UserTabBarVC'.") }
        if _R.storyboard.main().userWalletVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userWalletVC' could not be loaded from storyboard 'Main' as 'UserWalletVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
